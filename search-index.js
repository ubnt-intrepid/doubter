var N = null;var searchIndex = {};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",N,N],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",N,N],[17,"FLAG_A","","",N,N],[17,"FLAG_B","","",N,N],[17,"FLAG_C","","",N,N],[17,"FLAG_ABC","","",N,N],[11,"eq","","",0,[[["self"],["flags"]],["bool"]]],[11,"ne","","",0,[[["self"],["flags"]],["bool"]]],[11,"clone","","",0,[[["self"]],["flags"]]],[11,"partial_cmp","","",0,[[["self"],["flags"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["flags"]],["bool"]]],[11,"le","","",0,[[["self"],["flags"]],["bool"]]],[11,"gt","","",0,[[["self"],["flags"]],["bool"]]],[11,"ge","","",0,[[["self"],["flags"]],["bool"]]],[11,"cmp","","",0,[[["self"],["flags"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"empty","","Returns an empty set of flags.",0,[[],["flags"]]],[11,"all","","Returns the set containing all flags.",0,[[],["flags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",0,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,[[["u32"]],["option",["flags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,[[["u32"]],["flags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",0,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,[[["self"],["flags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,[[["self"],["flags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",0,[[["self"],["flags"]]]],[11,"remove","","Removes the specified flags in-place.",0,[[["self"],["flags"]]]],[11,"toggle","","Toggles the specified flags in-place.",0,[[["self"],["flags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,[[["self"],["flags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",0,[[["self"],["flags"]],["flags"]]],[11,"bitor_assign","","Adds the set of flags.",0,[[["self"],["flags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,[[["self"],["flags"]],["flags"]]],[11,"bitxor_assign","","Toggles the set of flags.",0,[[["self"],["flags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",0,[[["self"],["flags"]],["flags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",0,[[["self"],["flags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",0,[[["self"],["flags"]],["flags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",0,[[["self"],["flags"]]]],[11,"not","","Returns the complement of this set of flags.",0,[[["self"]],["flags"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"from_iter","","",0,[[["t"]],["flags"]]],[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[[3,"Flags"]]};
searchIndex["bytecount"]={"doc":"count occurrences of a given byte, or the number of UTF-8 code points, in a  byte slice, fast.","items":[[5,"count","bytecount","Count occurrences of a byte in a slice of bytes, fast",N,N],[5,"naive_count_32","","Count up to `(2^32)-1` occurrences of a byte in a slice of bytes, simple",N,N],[5,"naive_count","","Count occurrences of a byte in a slice of bytes, simple",N,N],[5,"num_chars","","Count the number of UTF-8 encoded unicode codepoints in a slice of bytes, fast",N,N],[5,"naive_num_chars","","Count the number of UTF-8 encoded unicode codepoints in a slice of bytes, simple",N,N]],"paths":[]};
searchIndex["doubter"]={"doc":"A helper crate for testing Rust code blocks in Markdown.","items":[[5,"generate_doc_tests","doubter","Generates a code from the given configuration.",N,[[["config"],["w"]],["result",["error"]]]],[3,"Config","","",N,N],[12,"includes","","",0,N],[12,"mode","","",0,N],[12,"use_external_doc","","",0,N],[4,"Mode","","",N,N],[13,"Raw","","",1,N],[13,"Extract","","",1,N],[14,"generate_doc_tests","","A macro generating an item from the specified Markdown files.",N,N],[11,"clone","","",1,[[["self"]],["mode"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",0,[[["str"]],["result",["config"]]]],[11,"parse","","",0,[[["parsebuffer"]],["result",["config","error"]]]]],"paths":[[3,"Config"],[4,"Mode"]]};
searchIndex["doubter_impl"]={"doc":"","items":[[0,"public","doubter_impl","",N,N],[3,"Config","doubter_impl::public","",N,N],[12,"includes","","",0,N],[12,"mode","","",0,N],[12,"use_external_doc","","",0,N],[4,"Mode","","",N,N],[13,"Raw","","",1,N],[13,"Extract","","",1,N],[5,"generate_doc_tests","","Generates a code from the given configuration.",N,[[["config"],["w"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["mode"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result"]]],[11,"parse","","",0,[[["parsestream"]],["result"]]]],"paths":[[3,"Config"],[4,"Mode"]]};
searchIndex["doubter_macros"]={"doc":"","items":[[5,"generate_doc_tests_impl","doubter_macros","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["glob"]={"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular pattern.",N,N],[3,"GlobError","","A glob iteration error.",N,N],[3,"PatternError","","A pattern parsing error.",N,N],[12,"pos","","The approximate character index of where the error occurred.",0,N],[12,"msg","","A message describing the error.",0,N],[3,"Pattern","","A compiled Unix shell style pattern.",N,N],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",N,N],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner. This currently only considers upper/lower case relationships between ASCII characters, but in future this might be extended to work with Unicode.",1,N],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on Posix) must be matched by a literal `/`, rather than by `*` or `?` or `[...]`",1,N],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.` will not match unless the `.` appears literally in the pattern: `*`, `?`, `**`, or `[...]` will not match. This is useful because such files are conventionally considered hidden on Unix systems and it might be desirable to skip them when listing files.",1,N],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",N,[[["str"]],["result",["paths","patternerror"]]]],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",N,[[["str"],["matchoptions"]],["result",["paths","patternerror"]]]],[6,"GlobResult","","An alias for a glob iteration result.",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"path","","The Path that the error corresponds to.",2,[[["self"]],["path"]]],[11,"error","","The error in question.",2,[[["self"]],["error"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option",["globresult"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["pattern"]]],[11,"eq","","",4,[[["self"],["pattern"]],["bool"]]],[11,"ne","","",4,[[["self"],["pattern"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["pattern"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["pattern"]],["bool"]]],[11,"le","","",4,[[["self"],["pattern"]],["bool"]]],[11,"gt","","",4,[[["self"],["pattern"]],["bool"]]],[11,"ge","","",4,[[["self"],["pattern"]],["bool"]]],[11,"cmp","","",4,[[["self"],["pattern"]],["ordering"]]],[11,"hash","","",4,N],[11,"default","","",4,[[],["pattern"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",4,[[["str"]],["result",["pattern","patternerror"]]]],[11,"new","","This function compiles Unix shell style patterns.",4,[[["str"]],["result",["pattern","patternerror"]]]],[11,"escape","","Escape metacharacters within the given string by surrounding them in brackets. The resulting string will, when compiled into a `Pattern`, match the input string and nothing else.",4,[[["str"]],["string"]]],[11,"matches","","Return if the given `str` matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,[[["self"],["str"]],["bool"]]],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,[[["self"],["path"]],["bool"]]],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified match options.",4,[[["self"],["str"],["matchoptions"]],["bool"]]],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the specified match options.",4,[[["self"],["path"],["matchoptions"]],["bool"]]],[11,"as_str","","Access the original glob pattern.",4,[[["self"]],["str"]]],[11,"clone","","",1,[[["self"]],["matchoptions"]]],[11,"eq","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"ne","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["matchoptions"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"le","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"gt","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"ge","","",1,[[["self"],["matchoptions"]],["bool"]]],[11,"cmp","","",1,[[["self"],["matchoptions"]],["ordering"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["matchoptions"]]],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used when calling functions that do not take an explicit `MatchOptions` parameter.",1,[[],["matchoptions"]]]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[11,"from","","",3,[[["span"]],["span"]]],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",4,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",5,[[["self"]],["intoiter"]]],[11,"clone","","",5,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",5,[[],["tokenstream"]]],[11,"empty","","",5,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",5,[[["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"from_str","","",5,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",5,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",3,[[],["span"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"Span"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["proc_macro_hack"]={"doc":"Defining procedural macros","items":[[14,"proc_macro_expr_decl","proc_macro_hack","Declare a hacky procedural macro that expands to an expression.",N,N],[14,"proc_macro_item_decl","","Declare a hacky procedural macro that expands to items.",N,N],[14,"proc_macro_expr_impl","","Implement a hacky procedural macro that expands to an expression.",N,N],[14,"proc_macro_item_impl","","Implement a hacky procedural macro that expands to items.",N,N]],"paths":[]};
searchIndex["proc_macro_hack_impl"]={"doc":"","items":[[5,"hack_expr","proc_macro_hack_impl","",N,[[["tokenstream"]],["tokenstream"]]],[5,"hack_item","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["pulldown_cmark"]={"doc":"Pull parser for commonmark.","items":[[3,"Parser","pulldown_cmark","",N,N],[3,"Options","","",N,N],[4,"Alignment","","",N,N],[13,"None","","",0,N],[13,"Left","","",0,N],[13,"Center","","",0,N],[13,"Right","","",0,N],[4,"Event","","",N,N],[13,"Start","","",1,N],[13,"End","","",1,N],[13,"Text","","",1,N],[13,"Html","","",1,N],[13,"InlineHtml","","",1,N],[13,"FootnoteReference","","",1,N],[13,"SoftBreak","","",1,N],[13,"HardBreak","","",1,N],[4,"Tag","","",N,N],[13,"Paragraph","","",2,N],[13,"Rule","","",2,N],[13,"Header","","A heading. The field indicates the level of the heading.",2,N],[13,"BlockQuote","","",2,N],[13,"CodeBlock","","",2,N],[13,"List","","A list. If the list is ordered the field indicates the number of the first item.",2,N],[13,"Item","","",2,N],[13,"FootnoteDefinition","","",2,N],[13,"Table","","",2,N],[13,"TableHead","","",2,N],[13,"TableRow","","",2,N],[13,"TableCell","","",2,N],[13,"Emphasis","","",2,N],[13,"Strong","","",2,N],[13,"Code","","",2,N],[13,"Link","","A link. The first field is the destination URL, the second is a title",2,N],[13,"Image","","An image. The first field is the destination URL, the second is a title",2,N],[0,"html","","HTML renderer that takes an iterator of events as input.",N,N],[5,"push_html","pulldown_cmark::html","Iterate over an `Iterator` of `Event`s, generate HTML for each `Event`, and push it to a `String`.",N,[[["string"],["i"]]]],[11,"new","pulldown_cmark","",3,[[["str"]],["parser"]]],[11,"new_ext","","",3,[[["str"],["options"]],["parser"]]],[11,"new_with_broken_link_callback","","In case the parser encounters any potential links that have a broken reference (e.g `[foo]` when there is no `[foo]:` entry at the bottom) the provided callback will be called with the reference name, and the returned pair will be used as the link name and title if not None.",3,[[["str"],["options"],["option",["fn"]]],["parser"]]],[11,"get_offset","","",3,[[["self"]],["usize"]]],[11,"next","","",3,[[["self"]],["option",["event"]]]],[11,"clone","","",2,[[["self"]],["tag"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["tag"]],["bool"]]],[11,"ne","","",2,[[["self"],["tag"]],["bool"]]],[11,"clone","","",1,[[["self"]],["event"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["event"]],["bool"]]],[11,"ne","","",1,[[["self"],["event"]],["bool"]]],[11,"clone","","",0,[[["self"]],["alignment"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["alignment"]],["bool"]]],[11,"eq","","",4,[[["self"],["options"]],["bool"]]],[11,"ne","","",4,[[["self"],["options"]],["bool"]]],[11,"clone","","",4,[[["self"]],["options"]]],[11,"partial_cmp","","",4,[[["self"],["options"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["options"]],["bool"]]],[11,"le","","",4,[[["self"],["options"]],["bool"]]],[11,"gt","","",4,[[["self"],["options"]],["bool"]]],[11,"ge","","",4,[[["self"],["options"]],["bool"]]],[11,"cmp","","",4,[[["self"],["options"]],["ordering"]]],[11,"hash","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"empty","","Returns an empty set of flags.",4,[[],["options"]]],[11,"all","","Returns the set containing all flags.",4,[[],["options"]]],[11,"bits","","Returns the raw value of the flags currently stored.",4,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",4,[[["u32"]],["option",["options"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",4,[[["u32"]],["options"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",4,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4,[[["self"],["options"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4,[[["self"],["options"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",4,[[["self"],["options"]]]],[11,"remove","","Removes the specified flags in-place.",4,[[["self"],["options"]]]],[11,"toggle","","Toggles the specified flags in-place.",4,[[["self"],["options"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",4,[[["self"],["options"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",4,[[["self"],["options"]],["options"]]],[11,"bitor_assign","","Adds the set of flags.",4,[[["self"],["options"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4,[[["self"],["options"]],["options"]]],[11,"bitxor_assign","","Toggles the set of flags.",4,[[["self"],["options"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",4,[[["self"],["options"]],["options"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",4,[[["self"],["options"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",4,[[["self"],["options"]],["options"]]],[11,"sub_assign","","Disables all flags enabled in the set.",4,[[["self"],["options"]]]],[11,"not","","Returns the complement of this set of flags.",4,[[["self"]],["options"]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["options"]]],[17,"OPTION_ENABLE_TABLES","","",N,N],[17,"OPTION_ENABLE_FOOTNOTES","","",N,N]],"paths":[[4,"Alignment"],[4,"Event"],[4,"Tag"],[3,"Parser"],[3,"Options"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[12,"attrs","","",10,N],[12,"bracket_token","","",10,N],[12,"elems","","",10,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[12,"attrs","","",11,N],[12,"left","","",11,N],[12,"eq_token","","",11,N],[12,"right","","",11,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[12,"attrs","","",12,N],[12,"left","","",12,N],[12,"op","","",12,N],[12,"right","","",12,N],[3,"ExprAsync","","An async block: `async { ... }`.",N,N],[12,"attrs","","",13,N],[12,"async_token","","",13,N],[12,"capture","","",13,N],[12,"block","","",13,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",14,N],[12,"left","","",14,N],[12,"op","","",14,N],[12,"right","","",14,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[12,"attrs","","",15,N],[12,"label","","",15,N],[12,"block","","",15,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[12,"attrs","","",16,N],[12,"box_token","","",16,N],[12,"expr","","",16,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[12,"attrs","","",17,N],[12,"break_token","","",17,N],[12,"label","","",17,N],[12,"expr","","",17,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",18,N],[12,"func","","",18,N],[12,"paren_token","","",18,N],[12,"args","","",18,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",19,N],[12,"expr","","",19,N],[12,"as_token","","",19,N],[12,"ty","","",19,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[12,"attrs","","",20,N],[12,"asyncness","","",20,N],[12,"movability","","",20,N],[12,"capture","","",20,N],[12,"or1_token","","",20,N],[12,"inputs","","",20,N],[12,"or2_token","","",20,N],[12,"output","","",20,N],[12,"body","","",20,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[12,"attrs","","",21,N],[12,"continue_token","","",21,N],[12,"label","","",21,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",22,N],[12,"base","","",22,N],[12,"dot_token","","",22,N],[12,"member","","",22,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[12,"attrs","","",23,N],[12,"label","","",23,N],[12,"for_token","","",23,N],[12,"pat","","",23,N],[12,"in_token","","",23,N],[12,"expr","","",23,N],[12,"body","","",23,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[12,"attrs","","",24,N],[12,"group_token","","",24,N],[12,"expr","","",24,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[12,"attrs","","",25,N],[12,"if_token","","",25,N],[12,"cond","","",25,N],[12,"then_branch","","",25,N],[12,"else_branch","","",25,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[12,"attrs","","",26,N],[12,"place","","",26,N],[12,"arrow_token","","",26,N],[12,"value","","",26,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",27,N],[12,"expr","","",27,N],[12,"bracket_token","","",27,N],[12,"index","","",27,N],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",N,N],[12,"attrs","","",28,N],[12,"let_token","","",28,N],[12,"pats","","",28,N],[12,"eq_token","","",28,N],[12,"expr","","",28,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",29,N],[12,"lit","","",29,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[12,"attrs","","",30,N],[12,"label","","",30,N],[12,"loop_token","","",30,N],[12,"body","","",30,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[12,"attrs","","",31,N],[12,"mac","","",31,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[12,"attrs","","",32,N],[12,"match_token","","",32,N],[12,"expr","","",32,N],[12,"brace_token","","",32,N],[12,"arms","","",32,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[12,"attrs","","",33,N],[12,"receiver","","",33,N],[12,"dot_token","","",33,N],[12,"method","","",33,N],[12,"turbofish","","",33,N],[12,"paren_token","","",33,N],[12,"args","","",33,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",34,N],[12,"paren_token","","",34,N],[12,"expr","","",34,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",35,N],[12,"qself","","",35,N],[12,"path","","",35,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[12,"attrs","","",36,N],[12,"from","","",36,N],[12,"limits","","",36,N],[12,"to","","",36,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[12,"attrs","","",37,N],[12,"and_token","","",37,N],[12,"mutability","","",37,N],[12,"expr","","",37,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[12,"attrs","","",38,N],[12,"bracket_token","","",38,N],[12,"expr","","",38,N],[12,"semi_token","","",38,N],[12,"len","","",38,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[12,"attrs","","",39,N],[12,"return_token","","",39,N],[12,"expr","","",39,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[12,"attrs","","",40,N],[12,"path","","",40,N],[12,"brace_token","","",40,N],[12,"fields","","",40,N],[12,"dot2_token","","",40,N],[12,"rest","","",40,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[12,"attrs","","",41,N],[12,"expr","","",41,N],[12,"question_token","","",41,N],[3,"ExprTryBlock","","A try block: `try { ... }`.",N,N],[12,"attrs","","",42,N],[12,"try_token","","",42,N],[12,"block","","",42,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[12,"attrs","","",43,N],[12,"paren_token","","",43,N],[12,"elems","","",43,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[12,"attrs","","",44,N],[12,"expr","","",44,N],[12,"colon_token","","",44,N],[12,"ty","","",44,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",45,N],[12,"op","","",45,N],[12,"expr","","",45,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[12,"attrs","","",46,N],[12,"unsafe_token","","",46,N],[12,"block","","",46,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",47,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[12,"attrs","","",48,N],[12,"label","","",48,N],[12,"while_token","","",48,N],[12,"cond","","",48,N],[12,"body","","",48,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[12,"attrs","","",49,N],[12,"yield_token","","",49,N],[12,"expr","","",49,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",50,N],[12,"span","","",50,N],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",N,N],[12,"attrs","","",51,N],[12,"leading_vert","","",51,N],[12,"pats","","",51,N],[12,"guard","","",51,N],[12,"fat_arrow_token","","",51,N],[12,"body","","",51,N],[12,"comma","","",51,N],[3,"Block","","A braced block containing Rust statements.",N,N],[12,"brace_token","","",52,N],[12,"stmts","","Statements in a block",52,N],[3,"FieldPat","","A single field in a struct pattern.",N,N],[12,"attrs","","",53,N],[12,"member","","",53,N],[12,"colon_token","","",53,N],[12,"pat","","",53,N],[3,"FieldValue","","A field-value pair in a struct literal.",N,N],[12,"attrs","","Attributes tagged on the field.",54,N],[12,"member","","Name or index of the field.",54,N],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,N],[12,"expr","","Value of the field.",54,N],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",N,N],[12,"name","","",55,N],[12,"colon_token","","",55,N],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",N,N],[12,"attrs","","",56,N],[12,"let_token","","",56,N],[12,"pats","","",56,N],[12,"ty","","",56,N],[12,"init","","",56,N],[12,"semi_token","","",56,N],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"PatBox","","A box pattern: `box v`.",N,N],[12,"box_token","","",58,N],[12,"pat","","",58,N],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",N,N],[12,"by_ref","","",59,N],[12,"mutability","","",59,N],[12,"ident","","",59,N],[12,"subpat","","",59,N],[3,"PatLit","","A literal pattern: `0`.",N,N],[12,"expr","","",60,N],[3,"PatMacro","","A macro in expression position.",N,N],[12,"mac","","",61,N],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",N,N],[12,"qself","","",62,N],[12,"path","","",62,N],[3,"PatRange","","A range pattern: `1..=2`.",N,N],[12,"lo","","",63,N],[12,"limits","","",63,N],[12,"hi","","",63,N],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",N,N],[12,"and_token","","",64,N],[12,"mutability","","",64,N],[12,"pat","","",64,N],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",N,N],[12,"bracket_token","","",65,N],[12,"front","","",65,N],[12,"middle","","",65,N],[12,"dot2_token","","",65,N],[12,"comma_token","","",65,N],[12,"back","","",65,N],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",N,N],[12,"path","","",66,N],[12,"brace_token","","",66,N],[12,"fields","","",66,N],[12,"dot2_token","","",66,N],[3,"PatTuple","","A tuple pattern: `(a, b)`.",N,N],[12,"paren_token","","",67,N],[12,"front","","",67,N],[12,"dot2_token","","",67,N],[12,"comma_token","","",67,N],[12,"back","","",67,N],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",N,N],[12,"path","","",68,N],[12,"pat","","",68,N],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",N,N],[12,"tts","","",69,N],[3,"PatWild","","A pattern that matches any value: `_`.",N,N],[12,"underscore_token","","",70,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",71,N],[12,"lt_token","","",71,N],[12,"lifetimes","","",71,N],[12,"gt_token","","",71,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",72,N],[12,"const_token","","",72,N],[12,"ident","","",72,N],[12,"colon_token","","",72,N],[12,"ty","","",72,N],[12,"eq_token","","",72,N],[12,"default","","",72,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",73,N],[12,"params","","",73,N],[12,"gt_token","","",73,N],[12,"where_clause","","",73,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",74,N],[12,"lifetime","","",74,N],[12,"colon_token","","",74,N],[12,"bounds","","",74,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",75,N],[12,"eq_token","","",75,N],[12,"rhs_ty","","",75,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",76,N],[12,"colon_token","","",76,N],[12,"bounds","","",76,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",77,N],[12,"bounded_ty","","The type being bounded",77,N],[12,"colon_token","","",77,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",78,N],[12,"modifier","","",78,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",79,N],[12,"ident","","",79,N],[12,"colon_token","","",79,N],[12,"bounds","","",79,N],[12,"eq_token","","",79,N],[12,"default","","",79,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",80,N],[12,"predicates","","",80,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",N,N],[12,"pat","","",81,N],[12,"colon_token","","",81,N],[12,"ty","","",81,N],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",N,N],[12,"mutability","","",82,N],[12,"self_token","","",82,N],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",N,N],[12,"and_token","","",83,N],[12,"lifetime","","",83,N],[12,"mutability","","",83,N],[12,"self_token","","",83,N],[3,"FnDecl","","Header of a function declaration, without including the body.",N,N],[12,"fn_token","","",84,N],[12,"generics","","",84,N],[12,"paren_token","","",84,N],[12,"inputs","","",84,N],[12,"variadic","","",84,N],[12,"output","","",84,N],[3,"ForeignItemFn","","A foreign function in an `extern` block.",N,N],[12,"attrs","","",85,N],[12,"vis","","",85,N],[12,"ident","","",85,N],[12,"decl","","",85,N],[12,"semi_token","","",85,N],[3,"ForeignItemMacro","","A macro invocation within an extern block.",N,N],[12,"attrs","","",86,N],[12,"mac","","",86,N],[12,"semi_token","","",86,N],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",N,N],[12,"attrs","","",87,N],[12,"vis","","",87,N],[12,"static_token","","",87,N],[12,"mutability","","",87,N],[12,"ident","","",87,N],[12,"colon_token","","",87,N],[12,"ty","","",87,N],[12,"semi_token","","",87,N],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",N,N],[12,"attrs","","",88,N],[12,"vis","","",88,N],[12,"type_token","","",88,N],[12,"ident","","",88,N],[12,"semi_token","","",88,N],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",N,N],[12,"tts","","",89,N],[3,"ImplItemConst","","An associated constant within an impl block.",N,N],[12,"attrs","","",90,N],[12,"vis","","",90,N],[12,"defaultness","","",90,N],[12,"const_token","","",90,N],[12,"ident","","",90,N],[12,"colon_token","","",90,N],[12,"ty","","",90,N],[12,"eq_token","","",90,N],[12,"expr","","",90,N],[12,"semi_token","","",90,N],[3,"ImplItemExistential","","An existential type within an impl block.",N,N],[12,"attrs","","",91,N],[12,"existential_token","","",91,N],[12,"type_token","","",91,N],[12,"ident","","",91,N],[12,"generics","","",91,N],[12,"colon_token","","",91,N],[12,"bounds","","",91,N],[12,"semi_token","","",91,N],[3,"ImplItemMacro","","A macro invocation within an impl block.",N,N],[12,"attrs","","",92,N],[12,"mac","","",92,N],[12,"semi_token","","",92,N],[3,"ImplItemMethod","","A method within an impl block.",N,N],[12,"attrs","","",93,N],[12,"vis","","",93,N],[12,"defaultness","","",93,N],[12,"sig","","",93,N],[12,"block","","",93,N],[3,"ImplItemType","","An associated type within an impl block.",N,N],[12,"attrs","","",94,N],[12,"vis","","",94,N],[12,"defaultness","","",94,N],[12,"type_token","","",94,N],[12,"ident","","",94,N],[12,"generics","","",94,N],[12,"eq_token","","",94,N],[12,"ty","","",94,N],[12,"semi_token","","",94,N],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",N,N],[12,"tts","","",95,N],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",N,N],[12,"attrs","","",96,N],[12,"vis","","",96,N],[12,"const_token","","",96,N],[12,"ident","","",96,N],[12,"colon_token","","",96,N],[12,"ty","","",96,N],[12,"eq_token","","",96,N],[12,"expr","","",96,N],[12,"semi_token","","",96,N],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",N,N],[12,"attrs","","",97,N],[12,"vis","","",97,N],[12,"enum_token","","",97,N],[12,"ident","","",97,N],[12,"generics","","",97,N],[12,"brace_token","","",97,N],[12,"variants","","",97,N],[3,"ItemExistential","","An existential type: `existential type Iter: Iterator<Item = u8>`.",N,N],[12,"attrs","","",98,N],[12,"vis","","",98,N],[12,"existential_token","","",98,N],[12,"type_token","","",98,N],[12,"ident","","",98,N],[12,"generics","","",98,N],[12,"colon_token","","",98,N],[12,"bounds","","",98,N],[12,"semi_token","","",98,N],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",N,N],[12,"attrs","","",99,N],[12,"vis","","",99,N],[12,"extern_token","","",99,N],[12,"crate_token","","",99,N],[12,"ident","","",99,N],[12,"rename","","",99,N],[12,"semi_token","","",99,N],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",N,N],[12,"attrs","","",100,N],[12,"vis","","",100,N],[12,"constness","","",100,N],[12,"unsafety","","",100,N],[12,"asyncness","","",100,N],[12,"abi","","",100,N],[12,"ident","","",100,N],[12,"decl","","",100,N],[12,"block","","",100,N],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",N,N],[12,"attrs","","",101,N],[12,"abi","","",101,N],[12,"brace_token","","",101,N],[12,"items","","",101,N],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",N,N],[12,"attrs","","",102,N],[12,"defaultness","","",102,N],[12,"unsafety","","",102,N],[12,"impl_token","","",102,N],[12,"generics","","",102,N],[12,"trait_","","Trait this impl implements.",102,N],[12,"self_ty","","The Self type of the impl.",102,N],[12,"brace_token","","",102,N],[12,"items","","",102,N],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",N,N],[12,"attrs","","",103,N],[12,"ident","","The `example` in `macro_rules! example { ... }`.",103,N],[12,"mac","","",103,N],[12,"semi_token","","",103,N],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",N,N],[12,"attrs","","",104,N],[12,"vis","","",104,N],[12,"macro_token","","",104,N],[12,"ident","","",104,N],[12,"paren_token","","",104,N],[12,"args","","",104,N],[12,"brace_token","","",104,N],[12,"body","","",104,N],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",N,N],[12,"attrs","","",105,N],[12,"vis","","",105,N],[12,"mod_token","","",105,N],[12,"ident","","",105,N],[12,"content","","",105,N],[12,"semi","","",105,N],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",N,N],[12,"attrs","","",106,N],[12,"vis","","",106,N],[12,"static_token","","",106,N],[12,"mutability","","",106,N],[12,"ident","","",106,N],[12,"colon_token","","",106,N],[12,"ty","","",106,N],[12,"eq_token","","",106,N],[12,"expr","","",106,N],[12,"semi_token","","",106,N],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",N,N],[12,"attrs","","",107,N],[12,"vis","","",107,N],[12,"struct_token","","",107,N],[12,"ident","","",107,N],[12,"generics","","",107,N],[12,"fields","","",107,N],[12,"semi_token","","",107,N],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",N,N],[12,"attrs","","",108,N],[12,"vis","","",108,N],[12,"unsafety","","",108,N],[12,"auto_token","","",108,N],[12,"trait_token","","",108,N],[12,"ident","","",108,N],[12,"generics","","",108,N],[12,"colon_token","","",108,N],[12,"supertraits","","",108,N],[12,"brace_token","","",108,N],[12,"items","","",108,N],[3,"ItemTraitAlias","","A trait alias: `pub trait SharableIterator = Iterator + Sync`.",N,N],[12,"attrs","","",109,N],[12,"vis","","",109,N],[12,"trait_token","","",109,N],[12,"ident","","",109,N],[12,"generics","","",109,N],[12,"eq_token","","",109,N],[12,"bounds","","",109,N],[12,"semi_token","","",109,N],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",N,N],[12,"attrs","","",110,N],[12,"vis","","",110,N],[12,"type_token","","",110,N],[12,"ident","","",110,N],[12,"generics","","",110,N],[12,"eq_token","","",110,N],[12,"ty","","",110,N],[12,"semi_token","","",110,N],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",N,N],[12,"attrs","","",111,N],[12,"vis","","",111,N],[12,"union_token","","",111,N],[12,"ident","","",111,N],[12,"generics","","",111,N],[12,"fields","","",111,N],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",N,N],[12,"attrs","","",112,N],[12,"vis","","",112,N],[12,"use_token","","",112,N],[12,"leading_colon","","",112,N],[12,"tree","","",112,N],[12,"semi_token","","",112,N],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",N,N],[12,"tts","","",113,N],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",N,N],[12,"constness","","",114,N],[12,"unsafety","","",114,N],[12,"asyncness","","",114,N],[12,"abi","","",114,N],[12,"ident","","",114,N],[12,"decl","","",114,N],[3,"TraitItemConst","","An associated constant within the definition of a trait.",N,N],[12,"attrs","","",115,N],[12,"const_token","","",115,N],[12,"ident","","",115,N],[12,"colon_token","","",115,N],[12,"ty","","",115,N],[12,"default","","",115,N],[12,"semi_token","","",115,N],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",N,N],[12,"attrs","","",116,N],[12,"mac","","",116,N],[12,"semi_token","","",116,N],[3,"TraitItemMethod","","A trait method within the definition of a trait.",N,N],[12,"attrs","","",117,N],[12,"sig","","",117,N],[12,"default","","",117,N],[12,"semi_token","","",117,N],[3,"TraitItemType","","An associated type within the definition of a trait.",N,N],[12,"attrs","","",118,N],[12,"type_token","","",118,N],[12,"ident","","",118,N],[12,"generics","","",118,N],[12,"colon_token","","",118,N],[12,"bounds","","",118,N],[12,"default","","",118,N],[12,"semi_token","","",118,N],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",N,N],[12,"tts","","",119,N],[3,"UseGlob","","A glob import in a `use` item: `*`.",N,N],[12,"star_token","","",120,N],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",N,N],[12,"brace_token","","",121,N],[12,"items","","",121,N],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",N,N],[12,"ident","","",122,N],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",N,N],[12,"ident","","",123,N],[12,"colon2_token","","",123,N],[12,"tree","","",123,N],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",N,N],[12,"ident","","",124,N],[12,"as_token","","",124,N],[12,"rename","","",124,N],[3,"File","","A complete file of Rust source code.",N,N],[12,"shebang","","",125,N],[12,"attrs","","",125,N],[12,"items","","",125,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",126,N],[12,"ident","","",126,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",127,N],[12,"span","","",127,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",128,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",129,N],[12,"bang_token","","",129,N],[12,"delimiter","","",129,N],[12,"tts","","",129,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",130,N],[12,"brace_token","","",130,N],[12,"variants","","",130,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",131,N],[12,"fields","","",131,N],[12,"semi_token","","",131,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",132,N],[12,"fields","","",132,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",133,N],[12,"vis","","Visibility of the struct or enum.",133,N],[12,"ident","","Name of the struct or enum.",133,N],[12,"generics","","Generics required to complete the definition.",133,N],[12,"data","","Data within the struct or enum.",133,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",134,N],[12,"name","","",134,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",135,N],[12,"ty","","",135,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",136,N],[12,"elem","","",136,N],[12,"semi_token","","",136,N],[12,"len","","",136,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"lifetimes","","",137,N],[12,"unsafety","","",137,N],[12,"abi","","",137,N],[12,"fn_token","","",137,N],[12,"paren_token","","",137,N],[12,"inputs","","",137,N],[12,"variadic","","",137,N],[12,"output","","",137,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",138,N],[12,"elem","","",138,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",139,N],[12,"bounds","","",139,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",140,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",141,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",142,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",143,N],[12,"elem","","",143,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",144,N],[12,"path","","",144,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",145,N],[12,"const_token","","",145,N],[12,"mutability","","",145,N],[12,"elem","","",145,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",146,N],[12,"lifetime","","",146,N],[12,"mutability","","",146,N],[12,"elem","","",146,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",147,N],[12,"elem","","",147,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",148,N],[12,"bounds","","",148,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",149,N],[12,"elems","","",149,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",150,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",151,N],[12,"lt_token","","",151,N],[12,"args","","",151,N],[12,"gt_token","","",151,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",152,N],[12,"eq_token","","",152,N],[12,"ty","","",152,N],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",N,N],[12,"ident","","",153,N],[12,"colon_token","","",153,N],[12,"bounds","","",153,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",154,N],[12,"inputs","","`(A, B)`",154,N],[12,"output","","`C`",154,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",155,N],[12,"segments","","",155,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",156,N],[12,"arguments","","",156,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",157,N],[12,"ty","","",157,N],[12,"position","","",157,N],[12,"as_token","","",157,N],[12,"gt_token","","",157,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",158,N],[13,"Inner","","",158,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",159,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",159,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",159,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",160,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",160,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",161,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",161,N],[13,"Unit","","Unit struct or unit variant such as `None`.",161,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",162,N],[13,"Crate","","A crate-level visibility: `crate`.",162,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",162,N],[13,"Inherited","","An inherited visibility, which usually means private.",162,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",163,N],[13,"InPlace","","A placement expression: `place <- value`.",163,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",163,N],[13,"Call","","A function call expression: `invoke(a, b)`.",163,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",163,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",163,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",163,N],[13,"Unary","","A unary operation: `!x`, `*x`.",163,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",163,N],[13,"Cast","","A cast expression: `foo as f64`.",163,N],[13,"Type","","A type ascription expression: `foo: f64`.",163,N],[13,"Let","","A `let` guard: `let Some(x) = opt`.",163,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",163,N],[13,"While","","A while loop: `while expr { ... }`.",163,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",163,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",163,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",163,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",163,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",163,N],[13,"Block","","A blocked scope: `{ ... }`.",163,N],[13,"Assign","","An assignment expression: `a = compute()`.",163,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",163,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",163,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",163,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",163,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",163,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",163,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",163,N],[13,"Continue","","A `continue`, with an optional label.",163,N],[13,"Return","","A `return`, with an optional value to be returned.",163,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",163,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",163,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",163,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",163,N],[13,"Group","","An expression contained within invisible delimiters.",163,N],[13,"Try","","A try-expression: `expr?`.",163,N],[13,"Async","","An async block: `async { ... }`.",163,N],[13,"TryBlock","","A try block: `try { ... }`.",163,N],[13,"Yield","","A yield expression: `yield expr`.",163,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",163,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",164,N],[13,"Unnamed","","An unnamed field like `self.0`.",164,N],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",N,N],[13,"Type","","A type argument.",165,N],[13,"Const","","A const expression. Must be inside of a block.",165,N],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",N,N],[13,"Wild","","A pattern that matches any value: `_`.",166,N],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",166,N],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",166,N],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",166,N],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",166,N],[13,"Tuple","","A tuple pattern: `(a, b)`.",166,N],[13,"Box","","A box pattern: `box v`.",166,N],[13,"Ref","","A reference pattern: `&mut (first, second)`.",166,N],[13,"Lit","","A literal pattern: `0`.",166,N],[13,"Range","","A range pattern: `1..=2`.",166,N],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",166,N],[13,"Macro","","A macro in expression position.",166,N],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",166,N],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",N,N],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",167,N],[13,"Closed","","Inclusive at the beginning and end.",167,N],[4,"Stmt","","A statement, usually ending in a semicolon.",N,N],[13,"Local","","A local (let) binding.",168,N],[13,"Item","","An item definition.",168,N],[13,"Expr","","Expr without trailing semicolon.",168,N],[13,"Semi","","Expression with trailing semicolon.",168,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",169,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",169,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",169,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",170,N],[13,"Maybe","","",170,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",171,N],[13,"Lifetime","","",171,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",172,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",172,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",172,N],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",N,N],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",173,N],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",173,N],[13,"Captured","","An explicitly typed pattern captured by a function signature.",173,N],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",173,N],[13,"Ignored","","A type not bound to any pattern in a function signature.",173,N],[4,"ForeignItem","","An item within an `extern` block.",N,N],[13,"Fn","","A foreign function in an `extern` block.",174,N],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",174,N],[13,"Type","","A foreign type in an `extern` block: `type void`.",174,N],[13,"Macro","","A macro invocation within an extern block.",174,N],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",174,N],[4,"ImplItem","","An item within an impl block.",N,N],[13,"Const","","An associated constant within an impl block.",175,N],[13,"Method","","A method within an impl block.",175,N],[13,"Type","","An associated type within an impl block.",175,N],[13,"Existential","","An existential type within an impl block.",175,N],[13,"Macro","","A macro invocation within an impl block.",175,N],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",175,N],[4,"Item","","Things that can appear directly inside of a module or scope.",N,N],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",176,N],[13,"Use","","A use declaration: `use std::collections::HashMap`.",176,N],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",176,N],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",176,N],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",176,N],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",176,N],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",176,N],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",176,N],[13,"Existential","","An existential type: `existential type Iter: Iterator<Item = u8>`.",176,N],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",176,N],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",176,N],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",176,N],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",176,N],[13,"TraitAlias","","A trait alias: `pub trait SharableIterator = Iterator + Sync`.",176,N],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",176,N],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",176,N],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",176,N],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",176,N],[4,"TraitItem","","An item declaration within the definition of a trait.",N,N],[13,"Const","","An associated constant within the definition of a trait.",177,N],[13,"Method","","A trait method within the definition of a trait.",177,N],[13,"Type","","An associated type within the definition of a trait.",177,N],[13,"Macro","","A macro invocation within the definition of a trait.",177,N],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",177,N],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",N,N],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",178,N],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",178,N],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",178,N],[13,"Glob","","A glob import in a `use` item: `*`.",178,N],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",178,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",179,N],[13,"F64","","",179,N],[13,"None","","",179,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",180,N],[13,"I16","","",180,N],[13,"I32","","",180,N],[13,"I64","","",180,N],[13,"I128","","",180,N],[13,"Isize","","",180,N],[13,"U8","","",180,N],[13,"U16","","",180,N],[13,"U32","","",180,N],[13,"U64","","",180,N],[13,"U128","","",180,N],[13,"Usize","","",180,N],[13,"None","","",180,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",181,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",181,N],[13,"Byte","","A byte literal: `b'f'`.",181,N],[13,"Char","","A character literal: `'a'`.",181,N],[13,"Int","","An integer literal: `1` or `1u16`.",181,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",181,N],[13,"Bool","","A boolean literal: `true` or `false`.",181,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",181,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",182,N],[13,"Raw","","A raw string like `r##\"data\"##`.",182,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",183,N],[13,"Brace","","",183,N],[13,"Bracket","","",183,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",184,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",184,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",184,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",185,N],[13,"Sub","","The `-` operator (subtraction)",185,N],[13,"Mul","","The `*` operator (multiplication)",185,N],[13,"Div","","The `/` operator (division)",185,N],[13,"Rem","","The `%` operator (modulus)",185,N],[13,"And","","The `&&` operator (logical and)",185,N],[13,"Or","","The `||` operator (logical or)",185,N],[13,"BitXor","","The `^` operator (bitwise xor)",185,N],[13,"BitAnd","","The `&` operator (bitwise and)",185,N],[13,"BitOr","","The `|` operator (bitwise or)",185,N],[13,"Shl","","The `<<` operator (shift left)",185,N],[13,"Shr","","The `>>` operator (shift right)",185,N],[13,"Eq","","The `==` operator (equality)",185,N],[13,"Lt","","The `<` operator (less than)",185,N],[13,"Le","","The `<=` operator (less than or equal to)",185,N],[13,"Ne","","The `!=` operator (not equal to)",185,N],[13,"Ge","","The `>=` operator (greater than or equal to)",185,N],[13,"Gt","","The `>` operator (greater than)",185,N],[13,"AddEq","","The `+=` operator",185,N],[13,"SubEq","","The `-=` operator",185,N],[13,"MulEq","","The `*=` operator",185,N],[13,"DivEq","","The `/=` operator",185,N],[13,"RemEq","","The `%=` operator",185,N],[13,"BitXorEq","","The `^=` operator",185,N],[13,"BitAndEq","","The `&=` operator",185,N],[13,"BitOrEq","","The `|=` operator",185,N],[13,"ShlEq","","The `<<=` operator",185,N],[13,"ShrEq","","The `>>=` operator",185,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",186,N],[13,"Not","","The `!` operator for logical inversion",186,N],[13,"Neg","","The `-` operator for negation",186,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",187,N],[13,"Wild","","Argument not given a name, matched with `_`.",187,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",188,N],[13,"Type","","A particular type is returned.",188,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",189,N],[13,"Array","","A fixed size array type: `[T; n]`.",189,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",189,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",189,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",189,N],[13,"Never","","The never type: `!`.",189,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",189,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",189,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",189,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",189,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",189,N],[13,"Group","","A type contained within invisible delimiters.",189,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",189,N],[13,"Macro","","A macro in the type position.",189,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",189,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",190,N],[13,"Type","","A type argument.",190,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",190,N],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",190,N],[13,"Const","","A const expression. Must be inside of a block.",190,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",191,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",191,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",191,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["error"]]]],[5,"parse_file","","Parse the content of a file of Rust code.",N,[[["str"]],["result",["file","error"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"spans","","",192,N],[3,"Abstract","","`abstract`",N,N],[12,"span","","",193,N],[3,"As","","`as`",N,N],[12,"span","","",194,N],[3,"Async","","`async`",N,N],[12,"span","","",195,N],[3,"Auto","","`auto`",N,N],[12,"span","","",196,N],[3,"Become","","`become`",N,N],[12,"span","","",197,N],[3,"Box","","`box`",N,N],[12,"span","","",198,N],[3,"Break","","`break`",N,N],[12,"span","","",199,N],[3,"CapSelf","","`Self`",N,N],[12,"span","","",200,N],[3,"Const","","`const`",N,N],[12,"span","","",201,N],[3,"Continue","","`continue`",N,N],[12,"span","","",202,N],[3,"Crate","","`crate`",N,N],[12,"span","","",203,N],[3,"Default","","`default`",N,N],[12,"span","","",204,N],[3,"Do","","`do`",N,N],[12,"span","","",205,N],[3,"Dyn","","`dyn`",N,N],[12,"span","","",206,N],[3,"Else","","`else`",N,N],[12,"span","","",207,N],[3,"Enum","","`enum`",N,N],[12,"span","","",208,N],[3,"Existential","","`existential`",N,N],[12,"span","","",209,N],[3,"Extern","","`extern`",N,N],[12,"span","","",210,N],[3,"Final","","`final`",N,N],[12,"span","","",211,N],[3,"Fn","","`fn`",N,N],[12,"span","","",212,N],[3,"For","","`for`",N,N],[12,"span","","",213,N],[3,"If","","`if`",N,N],[12,"span","","",214,N],[3,"Impl","","`impl`",N,N],[12,"span","","",215,N],[3,"In","","`in`",N,N],[12,"span","","",216,N],[3,"Let","","`let`",N,N],[12,"span","","",217,N],[3,"Loop","","`loop`",N,N],[12,"span","","",218,N],[3,"Macro","","`macro`",N,N],[12,"span","","",219,N],[3,"Match","","`match`",N,N],[12,"span","","",220,N],[3,"Mod","","`mod`",N,N],[12,"span","","",221,N],[3,"Move","","`move`",N,N],[12,"span","","",222,N],[3,"Mut","","`mut`",N,N],[12,"span","","",223,N],[3,"Override","","`override`",N,N],[12,"span","","",224,N],[3,"Priv","","`priv`",N,N],[12,"span","","",225,N],[3,"Pub","","`pub`",N,N],[12,"span","","",226,N],[3,"Ref","","`ref`",N,N],[12,"span","","",227,N],[3,"Return","","`return`",N,N],[12,"span","","",228,N],[3,"Self_","","`self`",N,N],[12,"span","","",229,N],[3,"Static","","`static`",N,N],[12,"span","","",230,N],[3,"Struct","","`struct`",N,N],[12,"span","","",231,N],[3,"Super","","`super`",N,N],[12,"span","","",232,N],[3,"Trait","","`trait`",N,N],[12,"span","","",233,N],[3,"Try","","`try`",N,N],[12,"span","","",234,N],[3,"Type","","`type`",N,N],[12,"span","","",235,N],[3,"Typeof","","`typeof`",N,N],[12,"span","","",236,N],[3,"Union","","`union`",N,N],[12,"span","","",237,N],[3,"Unsafe","","`unsafe`",N,N],[12,"span","","",238,N],[3,"Unsized","","`unsized`",N,N],[12,"span","","",239,N],[3,"Use","","`use`",N,N],[12,"span","","",240,N],[3,"Virtual","","`virtual`",N,N],[12,"span","","",241,N],[3,"Where","","`where`",N,N],[12,"span","","",242,N],[3,"While","","`while`",N,N],[12,"span","","",243,N],[3,"Yield","","`yield`",N,N],[12,"span","","",244,N],[3,"Add","","`+`",N,N],[12,"spans","","",245,N],[3,"AddEq","","`+=`",N,N],[12,"spans","","",246,N],[3,"And","","`&`",N,N],[12,"spans","","",247,N],[3,"AndAnd","","`&&`",N,N],[12,"spans","","",248,N],[3,"AndEq","","`&=`",N,N],[12,"spans","","",249,N],[3,"At","","`@`",N,N],[12,"spans","","",250,N],[3,"Bang","","`!`",N,N],[12,"spans","","",251,N],[3,"Caret","","`^`",N,N],[12,"spans","","",252,N],[3,"CaretEq","","`^=`",N,N],[12,"spans","","",253,N],[3,"Colon","","`:`",N,N],[12,"spans","","",254,N],[3,"Colon2","","`::`",N,N],[12,"spans","","",255,N],[3,"Comma","","`,`",N,N],[12,"spans","","",256,N],[3,"Div","","`/`",N,N],[12,"spans","","",257,N],[3,"DivEq","","`/=`",N,N],[12,"spans","","",258,N],[3,"Dollar","","`$`",N,N],[12,"spans","","",259,N],[3,"Dot","","`.`",N,N],[12,"spans","","",260,N],[3,"Dot2","","`..`",N,N],[12,"spans","","",261,N],[3,"Dot3","","`...`",N,N],[12,"spans","","",262,N],[3,"DotDotEq","","`..=`",N,N],[12,"spans","","",263,N],[3,"Eq","","`=`",N,N],[12,"spans","","",264,N],[3,"EqEq","","`==`",N,N],[12,"spans","","",265,N],[3,"Ge","","`>=`",N,N],[12,"spans","","",266,N],[3,"Gt","","`>`",N,N],[12,"spans","","",267,N],[3,"Le","","`<=`",N,N],[12,"spans","","",268,N],[3,"Lt","","`<`",N,N],[12,"spans","","",269,N],[3,"MulEq","","`*=`",N,N],[12,"spans","","",270,N],[3,"Ne","","`!=`",N,N],[12,"spans","","",271,N],[3,"Or","","`|`",N,N],[12,"spans","","",272,N],[3,"OrEq","","`|=`",N,N],[12,"spans","","",273,N],[3,"OrOr","","`||`",N,N],[12,"spans","","",274,N],[3,"Pound","","`#`",N,N],[12,"spans","","",275,N],[3,"Question","","`?`",N,N],[12,"spans","","",276,N],[3,"RArrow","","`->`",N,N],[12,"spans","","",277,N],[3,"LArrow","","`<-`",N,N],[12,"spans","","",278,N],[3,"Rem","","`%`",N,N],[12,"spans","","",279,N],[3,"RemEq","","`%=`",N,N],[12,"spans","","",280,N],[3,"FatArrow","","`=>`",N,N],[12,"spans","","",281,N],[3,"Semi","","`;`",N,N],[12,"spans","","",282,N],[3,"Shl","","`<<`",N,N],[12,"spans","","",283,N],[3,"ShlEq","","`<<=`",N,N],[12,"spans","","",284,N],[3,"Shr","","`>>`",N,N],[12,"spans","","",285,N],[3,"ShrEq","","`>>=`",N,N],[12,"spans","","",286,N],[3,"Star","","`*`",N,N],[12,"spans","","",287,N],[3,"Sub","","`-`",N,N],[12,"spans","","",288,N],[3,"SubEq","","`-=`",N,N],[12,"spans","","",289,N],[3,"Tilde","","`~`",N,N],[12,"spans","","",290,N],[3,"Brace","","`{...}`",N,N],[12,"span","","",291,N],[3,"Bracket","","`[...]`",N,N],[12,"span","","",292,N],[3,"Paren","","`(...)`",N,N],[12,"span","","",293,N],[3,"Group","","None-delimited group",N,N],[12,"span","","",294,N],[8,"Token","","Marker trait for types that represent single tokens.",N,N],[11,"peek","syn","",126,[[["cursor"]],["bool"]]],[11,"display","","",126,[[],["str"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"peek","","",295,[[["cursor"]],["bool"]]],[11,"display","","",295,[[],["str"]]],[11,"peek","","",296,[[["cursor"]],["bool"]]],[11,"display","","",296,[[],["str"]]],[11,"peek","","",297,[[["cursor"]],["bool"]]],[11,"display","","",297,[[],["str"]]],[11,"peek","","",298,[[["cursor"]],["bool"]]],[11,"display","","",298,[[],["str"]]],[11,"peek","","",299,[[["cursor"]],["bool"]]],[11,"display","","",299,[[],["str"]]],[11,"peek","","",300,[[["cursor"]],["bool"]]],[11,"display","","",300,[[],["str"]]],[11,"peek","","",127,[[["cursor"]],["bool"]]],[11,"display","","",127,[[],["str"]]],[11,"clone","syn::token","",192,[[["self"]],["underscore"]]],[11,"default","","",192,[[],["self"]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result"]]],[11,"eq","","",192,[[["self"],["underscore"]],["bool"]]],[11,"hash","","",192,[[["self"],["h"]]]],[11,"to_tokens","","",192,[[["self"],["tokenstream"]]]],[11,"parse","","",192,[[["parsestream"]],["result"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"peek","","",293,[[["cursor"]],["bool"]]],[11,"display","","",293,[[],["str"]]],[11,"peek","","",291,[[["cursor"]],["bool"]]],[11,"display","","",291,[[],["str"]]],[11,"peek","","",292,[[["cursor"]],["bool"]]],[11,"display","","",292,[[],["str"]]],[11,"peek","","",294,[[["cursor"]],["bool"]]],[11,"display","","",294,[[],["str"]]],[11,"clone","","",193,[[["self"]],["abstract"]]],[11,"default","","",193,[[],["self"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"eq","","",193,[[["self"],["abstract"]],["bool"]]],[11,"hash","","",193,[[["self"],["h"]]]],[11,"to_tokens","","",193,[[["self"],["tokenstream"]]]],[11,"parse","","",193,[[["parsestream"]],["result"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"clone","","",194,[[["self"]],["as"]]],[11,"default","","",194,[[],["self"]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result"]]],[11,"eq","","",194,[[["self"],["as"]],["bool"]]],[11,"hash","","",194,[[["self"],["h"]]]],[11,"to_tokens","","",194,[[["self"],["tokenstream"]]]],[11,"parse","","",194,[[["parsestream"]],["result"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"clone","","",195,[[["self"]],["async"]]],[11,"default","","",195,[[],["self"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"eq","","",195,[[["self"],["async"]],["bool"]]],[11,"hash","","",195,[[["self"],["h"]]]],[11,"to_tokens","","",195,[[["self"],["tokenstream"]]]],[11,"parse","","",195,[[["parsestream"]],["result"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"clone","","",196,[[["self"]],["auto"]]],[11,"default","","",196,[[],["self"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"eq","","",196,[[["self"],["auto"]],["bool"]]],[11,"hash","","",196,[[["self"],["h"]]]],[11,"to_tokens","","",196,[[["self"],["tokenstream"]]]],[11,"parse","","",196,[[["parsestream"]],["result"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"clone","","",197,[[["self"]],["become"]]],[11,"default","","",197,[[],["self"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"eq","","",197,[[["self"],["become"]],["bool"]]],[11,"hash","","",197,[[["self"],["h"]]]],[11,"to_tokens","","",197,[[["self"],["tokenstream"]]]],[11,"parse","","",197,[[["parsestream"]],["result"]]],[11,"peek","","",197,[[["cursor"]],["bool"]]],[11,"display","","",197,[[],["str"]]],[11,"clone","","",198,[[["self"]],["box"]]],[11,"default","","",198,[[],["self"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"eq","","",198,[[["self"],["box"]],["bool"]]],[11,"hash","","",198,[[["self"],["h"]]]],[11,"to_tokens","","",198,[[["self"],["tokenstream"]]]],[11,"parse","","",198,[[["parsestream"]],["result"]]],[11,"peek","","",198,[[["cursor"]],["bool"]]],[11,"display","","",198,[[],["str"]]],[11,"clone","","",199,[[["self"]],["break"]]],[11,"default","","",199,[[],["self"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"eq","","",199,[[["self"],["break"]],["bool"]]],[11,"hash","","",199,[[["self"],["h"]]]],[11,"to_tokens","","",199,[[["self"],["tokenstream"]]]],[11,"parse","","",199,[[["parsestream"]],["result"]]],[11,"peek","","",199,[[["cursor"]],["bool"]]],[11,"display","","",199,[[],["str"]]],[11,"clone","","",200,[[["self"]],["capself"]]],[11,"default","","",200,[[],["self"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"eq","","",200,[[["self"],["capself"]],["bool"]]],[11,"hash","","",200,[[["self"],["h"]]]],[11,"to_tokens","","",200,[[["self"],["tokenstream"]]]],[11,"parse","","",200,[[["parsestream"]],["result"]]],[11,"peek","","",200,[[["cursor"]],["bool"]]],[11,"display","","",200,[[],["str"]]],[11,"clone","","",201,[[["self"]],["const"]]],[11,"default","","",201,[[],["self"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"eq","","",201,[[["self"],["const"]],["bool"]]],[11,"hash","","",201,[[["self"],["h"]]]],[11,"to_tokens","","",201,[[["self"],["tokenstream"]]]],[11,"parse","","",201,[[["parsestream"]],["result"]]],[11,"peek","","",201,[[["cursor"]],["bool"]]],[11,"display","","",201,[[],["str"]]],[11,"clone","","",202,[[["self"]],["continue"]]],[11,"default","","",202,[[],["self"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"eq","","",202,[[["self"],["continue"]],["bool"]]],[11,"hash","","",202,[[["self"],["h"]]]],[11,"to_tokens","","",202,[[["self"],["tokenstream"]]]],[11,"parse","","",202,[[["parsestream"]],["result"]]],[11,"peek","","",202,[[["cursor"]],["bool"]]],[11,"display","","",202,[[],["str"]]],[11,"clone","","",203,[[["self"]],["crate"]]],[11,"default","","",203,[[],["self"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"eq","","",203,[[["self"],["crate"]],["bool"]]],[11,"hash","","",203,[[["self"],["h"]]]],[11,"to_tokens","","",203,[[["self"],["tokenstream"]]]],[11,"parse","","",203,[[["parsestream"]],["result"]]],[11,"peek","","",203,[[["cursor"]],["bool"]]],[11,"display","","",203,[[],["str"]]],[11,"clone","","",204,[[["self"]],["default"]]],[11,"default","","",204,[[],["self"]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"eq","","",204,[[["self"],["default"]],["bool"]]],[11,"hash","","",204,[[["self"],["h"]]]],[11,"to_tokens","","",204,[[["self"],["tokenstream"]]]],[11,"parse","","",204,[[["parsestream"]],["result"]]],[11,"peek","","",204,[[["cursor"]],["bool"]]],[11,"display","","",204,[[],["str"]]],[11,"clone","","",205,[[["self"]],["do"]]],[11,"default","","",205,[[],["self"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"eq","","",205,[[["self"],["do"]],["bool"]]],[11,"hash","","",205,[[["self"],["h"]]]],[11,"to_tokens","","",205,[[["self"],["tokenstream"]]]],[11,"parse","","",205,[[["parsestream"]],["result"]]],[11,"peek","","",205,[[["cursor"]],["bool"]]],[11,"display","","",205,[[],["str"]]],[11,"clone","","",206,[[["self"]],["dyn"]]],[11,"default","","",206,[[],["self"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"eq","","",206,[[["self"],["dyn"]],["bool"]]],[11,"hash","","",206,[[["self"],["h"]]]],[11,"to_tokens","","",206,[[["self"],["tokenstream"]]]],[11,"parse","","",206,[[["parsestream"]],["result"]]],[11,"peek","","",206,[[["cursor"]],["bool"]]],[11,"display","","",206,[[],["str"]]],[11,"clone","","",207,[[["self"]],["else"]]],[11,"default","","",207,[[],["self"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"eq","","",207,[[["self"],["else"]],["bool"]]],[11,"hash","","",207,[[["self"],["h"]]]],[11,"to_tokens","","",207,[[["self"],["tokenstream"]]]],[11,"parse","","",207,[[["parsestream"]],["result"]]],[11,"peek","","",207,[[["cursor"]],["bool"]]],[11,"display","","",207,[[],["str"]]],[11,"clone","","",208,[[["self"]],["enum"]]],[11,"default","","",208,[[],["self"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"eq","","",208,[[["self"],["enum"]],["bool"]]],[11,"hash","","",208,[[["self"],["h"]]]],[11,"to_tokens","","",208,[[["self"],["tokenstream"]]]],[11,"parse","","",208,[[["parsestream"]],["result"]]],[11,"peek","","",208,[[["cursor"]],["bool"]]],[11,"display","","",208,[[],["str"]]],[11,"clone","","",209,[[["self"]],["existential"]]],[11,"default","","",209,[[],["self"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"eq","","",209,[[["self"],["existential"]],["bool"]]],[11,"hash","","",209,[[["self"],["h"]]]],[11,"to_tokens","","",209,[[["self"],["tokenstream"]]]],[11,"parse","","",209,[[["parsestream"]],["result"]]],[11,"peek","","",209,[[["cursor"]],["bool"]]],[11,"display","","",209,[[],["str"]]],[11,"clone","","",210,[[["self"]],["extern"]]],[11,"default","","",210,[[],["self"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"eq","","",210,[[["self"],["extern"]],["bool"]]],[11,"hash","","",210,[[["self"],["h"]]]],[11,"to_tokens","","",210,[[["self"],["tokenstream"]]]],[11,"parse","","",210,[[["parsestream"]],["result"]]],[11,"peek","","",210,[[["cursor"]],["bool"]]],[11,"display","","",210,[[],["str"]]],[11,"clone","","",211,[[["self"]],["final"]]],[11,"default","","",211,[[],["self"]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result"]]],[11,"eq","","",211,[[["self"],["final"]],["bool"]]],[11,"hash","","",211,[[["self"],["h"]]]],[11,"to_tokens","","",211,[[["self"],["tokenstream"]]]],[11,"parse","","",211,[[["parsestream"]],["result"]]],[11,"peek","","",211,[[["cursor"]],["bool"]]],[11,"display","","",211,[[],["str"]]],[11,"clone","","",212,[[["self"]],["fn"]]],[11,"default","","",212,[[],["self"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"eq","","",212,[[["self"],["fn"]],["bool"]]],[11,"hash","","",212,[[["self"],["h"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"parse","","",212,[[["parsestream"]],["result"]]],[11,"peek","","",212,[[["cursor"]],["bool"]]],[11,"display","","",212,[[],["str"]]],[11,"clone","","",213,[[["self"]],["for"]]],[11,"default","","",213,[[],["self"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"eq","","",213,[[["self"],["for"]],["bool"]]],[11,"hash","","",213,[[["self"],["h"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"parse","","",213,[[["parsestream"]],["result"]]],[11,"peek","","",213,[[["cursor"]],["bool"]]],[11,"display","","",213,[[],["str"]]],[11,"clone","","",214,[[["self"]],["if"]]],[11,"default","","",214,[[],["self"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"eq","","",214,[[["self"],["if"]],["bool"]]],[11,"hash","","",214,[[["self"],["h"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"parse","","",214,[[["parsestream"]],["result"]]],[11,"peek","","",214,[[["cursor"]],["bool"]]],[11,"display","","",214,[[],["str"]]],[11,"clone","","",215,[[["self"]],["impl"]]],[11,"default","","",215,[[],["self"]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result"]]],[11,"eq","","",215,[[["self"],["impl"]],["bool"]]],[11,"hash","","",215,[[["self"],["h"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"parse","","",215,[[["parsestream"]],["result"]]],[11,"peek","","",215,[[["cursor"]],["bool"]]],[11,"display","","",215,[[],["str"]]],[11,"clone","","",216,[[["self"]],["in"]]],[11,"default","","",216,[[],["self"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"eq","","",216,[[["self"],["in"]],["bool"]]],[11,"hash","","",216,[[["self"],["h"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"parse","","",216,[[["parsestream"]],["result"]]],[11,"peek","","",216,[[["cursor"]],["bool"]]],[11,"display","","",216,[[],["str"]]],[11,"clone","","",217,[[["self"]],["let"]]],[11,"default","","",217,[[],["self"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"eq","","",217,[[["self"],["let"]],["bool"]]],[11,"hash","","",217,[[["self"],["h"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"parse","","",217,[[["parsestream"]],["result"]]],[11,"peek","","",217,[[["cursor"]],["bool"]]],[11,"display","","",217,[[],["str"]]],[11,"clone","","",218,[[["self"]],["loop"]]],[11,"default","","",218,[[],["self"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"eq","","",218,[[["self"],["loop"]],["bool"]]],[11,"hash","","",218,[[["self"],["h"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"parse","","",218,[[["parsestream"]],["result"]]],[11,"peek","","",218,[[["cursor"]],["bool"]]],[11,"display","","",218,[[],["str"]]],[11,"clone","","",219,[[["self"]],["macro"]]],[11,"default","","",219,[[],["self"]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result"]]],[11,"eq","","",219,[[["self"],["macro"]],["bool"]]],[11,"hash","","",219,[[["self"],["h"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"parse","","",219,[[["parsestream"]],["result"]]],[11,"peek","","",219,[[["cursor"]],["bool"]]],[11,"display","","",219,[[],["str"]]],[11,"clone","","",220,[[["self"]],["match"]]],[11,"default","","",220,[[],["self"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"eq","","",220,[[["self"],["match"]],["bool"]]],[11,"hash","","",220,[[["self"],["h"]]]],[11,"to_tokens","","",220,[[["self"],["tokenstream"]]]],[11,"parse","","",220,[[["parsestream"]],["result"]]],[11,"peek","","",220,[[["cursor"]],["bool"]]],[11,"display","","",220,[[],["str"]]],[11,"clone","","",221,[[["self"]],["mod"]]],[11,"default","","",221,[[],["self"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"eq","","",221,[[["self"],["mod"]],["bool"]]],[11,"hash","","",221,[[["self"],["h"]]]],[11,"to_tokens","","",221,[[["self"],["tokenstream"]]]],[11,"parse","","",221,[[["parsestream"]],["result"]]],[11,"peek","","",221,[[["cursor"]],["bool"]]],[11,"display","","",221,[[],["str"]]],[11,"clone","","",222,[[["self"]],["move"]]],[11,"default","","",222,[[],["self"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"eq","","",222,[[["self"],["move"]],["bool"]]],[11,"hash","","",222,[[["self"],["h"]]]],[11,"to_tokens","","",222,[[["self"],["tokenstream"]]]],[11,"parse","","",222,[[["parsestream"]],["result"]]],[11,"peek","","",222,[[["cursor"]],["bool"]]],[11,"display","","",222,[[],["str"]]],[11,"clone","","",223,[[["self"]],["mut"]]],[11,"default","","",223,[[],["self"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"eq","","",223,[[["self"],["mut"]],["bool"]]],[11,"hash","","",223,[[["self"],["h"]]]],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"parse","","",223,[[["parsestream"]],["result"]]],[11,"peek","","",223,[[["cursor"]],["bool"]]],[11,"display","","",223,[[],["str"]]],[11,"clone","","",224,[[["self"]],["override"]]],[11,"default","","",224,[[],["self"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result"]]],[11,"eq","","",224,[[["self"],["override"]],["bool"]]],[11,"hash","","",224,[[["self"],["h"]]]],[11,"to_tokens","","",224,[[["self"],["tokenstream"]]]],[11,"parse","","",224,[[["parsestream"]],["result"]]],[11,"peek","","",224,[[["cursor"]],["bool"]]],[11,"display","","",224,[[],["str"]]],[11,"clone","","",225,[[["self"]],["priv"]]],[11,"default","","",225,[[],["self"]]],[11,"fmt","","",225,[[["self"],["formatter"]],["result"]]],[11,"eq","","",225,[[["self"],["priv"]],["bool"]]],[11,"hash","","",225,[[["self"],["h"]]]],[11,"to_tokens","","",225,[[["self"],["tokenstream"]]]],[11,"parse","","",225,[[["parsestream"]],["result"]]],[11,"peek","","",225,[[["cursor"]],["bool"]]],[11,"display","","",225,[[],["str"]]],[11,"clone","","",226,[[["self"]],["pub"]]],[11,"default","","",226,[[],["self"]]],[11,"fmt","","",226,[[["self"],["formatter"]],["result"]]],[11,"eq","","",226,[[["self"],["pub"]],["bool"]]],[11,"hash","","",226,[[["self"],["h"]]]],[11,"to_tokens","","",226,[[["self"],["tokenstream"]]]],[11,"parse","","",226,[[["parsestream"]],["result"]]],[11,"peek","","",226,[[["cursor"]],["bool"]]],[11,"display","","",226,[[],["str"]]],[11,"clone","","",227,[[["self"]],["ref"]]],[11,"default","","",227,[[],["self"]]],[11,"fmt","","",227,[[["self"],["formatter"]],["result"]]],[11,"eq","","",227,[[["self"],["ref"]],["bool"]]],[11,"hash","","",227,[[["self"],["h"]]]],[11,"to_tokens","","",227,[[["self"],["tokenstream"]]]],[11,"parse","","",227,[[["parsestream"]],["result"]]],[11,"peek","","",227,[[["cursor"]],["bool"]]],[11,"display","","",227,[[],["str"]]],[11,"clone","","",228,[[["self"]],["return"]]],[11,"default","","",228,[[],["self"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"eq","","",228,[[["self"],["return"]],["bool"]]],[11,"hash","","",228,[[["self"],["h"]]]],[11,"to_tokens","","",228,[[["self"],["tokenstream"]]]],[11,"parse","","",228,[[["parsestream"]],["result"]]],[11,"peek","","",228,[[["cursor"]],["bool"]]],[11,"display","","",228,[[],["str"]]],[11,"clone","","",229,[[["self"]],["self_"]]],[11,"default","","",229,[[],["self"]]],[11,"fmt","","",229,[[["self"],["formatter"]],["result"]]],[11,"eq","","",229,[[["self"],["self_"]],["bool"]]],[11,"hash","","",229,[[["self"],["h"]]]],[11,"to_tokens","","",229,[[["self"],["tokenstream"]]]],[11,"parse","","",229,[[["parsestream"]],["result"]]],[11,"peek","","",229,[[["cursor"]],["bool"]]],[11,"display","","",229,[[],["str"]]],[11,"clone","","",230,[[["self"]],["static"]]],[11,"default","","",230,[[],["self"]]],[11,"fmt","","",230,[[["self"],["formatter"]],["result"]]],[11,"eq","","",230,[[["self"],["static"]],["bool"]]],[11,"hash","","",230,[[["self"],["h"]]]],[11,"to_tokens","","",230,[[["self"],["tokenstream"]]]],[11,"parse","","",230,[[["parsestream"]],["result"]]],[11,"peek","","",230,[[["cursor"]],["bool"]]],[11,"display","","",230,[[],["str"]]],[11,"clone","","",231,[[["self"]],["struct"]]],[11,"default","","",231,[[],["self"]]],[11,"fmt","","",231,[[["self"],["formatter"]],["result"]]],[11,"eq","","",231,[[["self"],["struct"]],["bool"]]],[11,"hash","","",231,[[["self"],["h"]]]],[11,"to_tokens","","",231,[[["self"],["tokenstream"]]]],[11,"parse","","",231,[[["parsestream"]],["result"]]],[11,"peek","","",231,[[["cursor"]],["bool"]]],[11,"display","","",231,[[],["str"]]],[11,"clone","","",232,[[["self"]],["super"]]],[11,"default","","",232,[[],["self"]]],[11,"fmt","","",232,[[["self"],["formatter"]],["result"]]],[11,"eq","","",232,[[["self"],["super"]],["bool"]]],[11,"hash","","",232,[[["self"],["h"]]]],[11,"to_tokens","","",232,[[["self"],["tokenstream"]]]],[11,"parse","","",232,[[["parsestream"]],["result"]]],[11,"peek","","",232,[[["cursor"]],["bool"]]],[11,"display","","",232,[[],["str"]]],[11,"clone","","",233,[[["self"]],["trait"]]],[11,"default","","",233,[[],["self"]]],[11,"fmt","","",233,[[["self"],["formatter"]],["result"]]],[11,"eq","","",233,[[["self"],["trait"]],["bool"]]],[11,"hash","","",233,[[["self"],["h"]]]],[11,"to_tokens","","",233,[[["self"],["tokenstream"]]]],[11,"parse","","",233,[[["parsestream"]],["result"]]],[11,"peek","","",233,[[["cursor"]],["bool"]]],[11,"display","","",233,[[],["str"]]],[11,"clone","","",234,[[["self"]],["try"]]],[11,"default","","",234,[[],["self"]]],[11,"fmt","","",234,[[["self"],["formatter"]],["result"]]],[11,"eq","","",234,[[["self"],["try"]],["bool"]]],[11,"hash","","",234,[[["self"],["h"]]]],[11,"to_tokens","","",234,[[["self"],["tokenstream"]]]],[11,"parse","","",234,[[["parsestream"]],["result"]]],[11,"peek","","",234,[[["cursor"]],["bool"]]],[11,"display","","",234,[[],["str"]]],[11,"clone","","",235,[[["self"]],["type"]]],[11,"default","","",235,[[],["self"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[11,"eq","","",235,[[["self"],["type"]],["bool"]]],[11,"hash","","",235,[[["self"],["h"]]]],[11,"to_tokens","","",235,[[["self"],["tokenstream"]]]],[11,"parse","","",235,[[["parsestream"]],["result"]]],[11,"peek","","",235,[[["cursor"]],["bool"]]],[11,"display","","",235,[[],["str"]]],[11,"clone","","",236,[[["self"]],["typeof"]]],[11,"default","","",236,[[],["self"]]],[11,"fmt","","",236,[[["self"],["formatter"]],["result"]]],[11,"eq","","",236,[[["self"],["typeof"]],["bool"]]],[11,"hash","","",236,[[["self"],["h"]]]],[11,"to_tokens","","",236,[[["self"],["tokenstream"]]]],[11,"parse","","",236,[[["parsestream"]],["result"]]],[11,"peek","","",236,[[["cursor"]],["bool"]]],[11,"display","","",236,[[],["str"]]],[11,"clone","","",237,[[["self"]],["union"]]],[11,"default","","",237,[[],["self"]]],[11,"fmt","","",237,[[["self"],["formatter"]],["result"]]],[11,"eq","","",237,[[["self"],["union"]],["bool"]]],[11,"hash","","",237,[[["self"],["h"]]]],[11,"to_tokens","","",237,[[["self"],["tokenstream"]]]],[11,"parse","","",237,[[["parsestream"]],["result"]]],[11,"peek","","",237,[[["cursor"]],["bool"]]],[11,"display","","",237,[[],["str"]]],[11,"clone","","",238,[[["self"]],["unsafe"]]],[11,"default","","",238,[[],["self"]]],[11,"fmt","","",238,[[["self"],["formatter"]],["result"]]],[11,"eq","","",238,[[["self"],["unsafe"]],["bool"]]],[11,"hash","","",238,[[["self"],["h"]]]],[11,"to_tokens","","",238,[[["self"],["tokenstream"]]]],[11,"parse","","",238,[[["parsestream"]],["result"]]],[11,"peek","","",238,[[["cursor"]],["bool"]]],[11,"display","","",238,[[],["str"]]],[11,"clone","","",239,[[["self"]],["unsized"]]],[11,"default","","",239,[[],["self"]]],[11,"fmt","","",239,[[["self"],["formatter"]],["result"]]],[11,"eq","","",239,[[["self"],["unsized"]],["bool"]]],[11,"hash","","",239,[[["self"],["h"]]]],[11,"to_tokens","","",239,[[["self"],["tokenstream"]]]],[11,"parse","","",239,[[["parsestream"]],["result"]]],[11,"peek","","",239,[[["cursor"]],["bool"]]],[11,"display","","",239,[[],["str"]]],[11,"clone","","",240,[[["self"]],["use"]]],[11,"default","","",240,[[],["self"]]],[11,"fmt","","",240,[[["self"],["formatter"]],["result"]]],[11,"eq","","",240,[[["self"],["use"]],["bool"]]],[11,"hash","","",240,[[["self"],["h"]]]],[11,"to_tokens","","",240,[[["self"],["tokenstream"]]]],[11,"parse","","",240,[[["parsestream"]],["result"]]],[11,"peek","","",240,[[["cursor"]],["bool"]]],[11,"display","","",240,[[],["str"]]],[11,"clone","","",241,[[["self"]],["virtual"]]],[11,"default","","",241,[[],["self"]]],[11,"fmt","","",241,[[["self"],["formatter"]],["result"]]],[11,"eq","","",241,[[["self"],["virtual"]],["bool"]]],[11,"hash","","",241,[[["self"],["h"]]]],[11,"to_tokens","","",241,[[["self"],["tokenstream"]]]],[11,"parse","","",241,[[["parsestream"]],["result"]]],[11,"peek","","",241,[[["cursor"]],["bool"]]],[11,"display","","",241,[[],["str"]]],[11,"clone","","",242,[[["self"]],["where"]]],[11,"default","","",242,[[],["self"]]],[11,"fmt","","",242,[[["self"],["formatter"]],["result"]]],[11,"eq","","",242,[[["self"],["where"]],["bool"]]],[11,"hash","","",242,[[["self"],["h"]]]],[11,"to_tokens","","",242,[[["self"],["tokenstream"]]]],[11,"parse","","",242,[[["parsestream"]],["result"]]],[11,"peek","","",242,[[["cursor"]],["bool"]]],[11,"display","","",242,[[],["str"]]],[11,"clone","","",243,[[["self"]],["while"]]],[11,"default","","",243,[[],["self"]]],[11,"fmt","","",243,[[["self"],["formatter"]],["result"]]],[11,"eq","","",243,[[["self"],["while"]],["bool"]]],[11,"hash","","",243,[[["self"],["h"]]]],[11,"to_tokens","","",243,[[["self"],["tokenstream"]]]],[11,"parse","","",243,[[["parsestream"]],["result"]]],[11,"peek","","",243,[[["cursor"]],["bool"]]],[11,"display","","",243,[[],["str"]]],[11,"clone","","",244,[[["self"]],["yield"]]],[11,"default","","",244,[[],["self"]]],[11,"fmt","","",244,[[["self"],["formatter"]],["result"]]],[11,"eq","","",244,[[["self"],["yield"]],["bool"]]],[11,"hash","","",244,[[["self"],["h"]]]],[11,"to_tokens","","",244,[[["self"],["tokenstream"]]]],[11,"parse","","",244,[[["parsestream"]],["result"]]],[11,"peek","","",244,[[["cursor"]],["bool"]]],[11,"display","","",244,[[],["str"]]],[11,"clone","","",245,[[["self"]],["add"]]],[11,"default","","",245,[[],["self"]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[11,"eq","","",245,[[["self"],["add"]],["bool"]]],[11,"hash","","",245,[[["self"],["h"]]]],[11,"to_tokens","","",245,[[["self"],["tokenstream"]]]],[11,"parse","","",245,[[["parsestream"]],["result"]]],[11,"peek","","",245,[[["cursor"]],["bool"]]],[11,"display","","",245,[[],["str"]]],[11,"clone","","",246,[[["self"]],["addeq"]]],[11,"default","","",246,[[],["self"]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[11,"eq","","",246,[[["self"],["addeq"]],["bool"]]],[11,"hash","","",246,[[["self"],["h"]]]],[11,"to_tokens","","",246,[[["self"],["tokenstream"]]]],[11,"parse","","",246,[[["parsestream"]],["result"]]],[11,"peek","","",246,[[["cursor"]],["bool"]]],[11,"display","","",246,[[],["str"]]],[11,"clone","","",247,[[["self"]],["and"]]],[11,"default","","",247,[[],["self"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"eq","","",247,[[["self"],["and"]],["bool"]]],[11,"hash","","",247,[[["self"],["h"]]]],[11,"to_tokens","","",247,[[["self"],["tokenstream"]]]],[11,"parse","","",247,[[["parsestream"]],["result"]]],[11,"peek","","",247,[[["cursor"]],["bool"]]],[11,"display","","",247,[[],["str"]]],[11,"clone","","",248,[[["self"]],["andand"]]],[11,"default","","",248,[[],["self"]]],[11,"fmt","","",248,[[["self"],["formatter"]],["result"]]],[11,"eq","","",248,[[["self"],["andand"]],["bool"]]],[11,"hash","","",248,[[["self"],["h"]]]],[11,"to_tokens","","",248,[[["self"],["tokenstream"]]]],[11,"parse","","",248,[[["parsestream"]],["result"]]],[11,"peek","","",248,[[["cursor"]],["bool"]]],[11,"display","","",248,[[],["str"]]],[11,"clone","","",249,[[["self"]],["andeq"]]],[11,"default","","",249,[[],["self"]]],[11,"fmt","","",249,[[["self"],["formatter"]],["result"]]],[11,"eq","","",249,[[["self"],["andeq"]],["bool"]]],[11,"hash","","",249,[[["self"],["h"]]]],[11,"to_tokens","","",249,[[["self"],["tokenstream"]]]],[11,"parse","","",249,[[["parsestream"]],["result"]]],[11,"peek","","",249,[[["cursor"]],["bool"]]],[11,"display","","",249,[[],["str"]]],[11,"clone","","",250,[[["self"]],["at"]]],[11,"default","","",250,[[],["self"]]],[11,"fmt","","",250,[[["self"],["formatter"]],["result"]]],[11,"eq","","",250,[[["self"],["at"]],["bool"]]],[11,"hash","","",250,[[["self"],["h"]]]],[11,"to_tokens","","",250,[[["self"],["tokenstream"]]]],[11,"parse","","",250,[[["parsestream"]],["result"]]],[11,"peek","","",250,[[["cursor"]],["bool"]]],[11,"display","","",250,[[],["str"]]],[11,"clone","","",251,[[["self"]],["bang"]]],[11,"default","","",251,[[],["self"]]],[11,"fmt","","",251,[[["self"],["formatter"]],["result"]]],[11,"eq","","",251,[[["self"],["bang"]],["bool"]]],[11,"hash","","",251,[[["self"],["h"]]]],[11,"to_tokens","","",251,[[["self"],["tokenstream"]]]],[11,"parse","","",251,[[["parsestream"]],["result"]]],[11,"peek","","",251,[[["cursor"]],["bool"]]],[11,"display","","",251,[[],["str"]]],[11,"clone","","",252,[[["self"]],["caret"]]],[11,"default","","",252,[[],["self"]]],[11,"fmt","","",252,[[["self"],["formatter"]],["result"]]],[11,"eq","","",252,[[["self"],["caret"]],["bool"]]],[11,"hash","","",252,[[["self"],["h"]]]],[11,"to_tokens","","",252,[[["self"],["tokenstream"]]]],[11,"parse","","",252,[[["parsestream"]],["result"]]],[11,"peek","","",252,[[["cursor"]],["bool"]]],[11,"display","","",252,[[],["str"]]],[11,"clone","","",253,[[["self"]],["careteq"]]],[11,"default","","",253,[[],["self"]]],[11,"fmt","","",253,[[["self"],["formatter"]],["result"]]],[11,"eq","","",253,[[["self"],["careteq"]],["bool"]]],[11,"hash","","",253,[[["self"],["h"]]]],[11,"to_tokens","","",253,[[["self"],["tokenstream"]]]],[11,"parse","","",253,[[["parsestream"]],["result"]]],[11,"peek","","",253,[[["cursor"]],["bool"]]],[11,"display","","",253,[[],["str"]]],[11,"clone","","",254,[[["self"]],["colon"]]],[11,"default","","",254,[[],["self"]]],[11,"fmt","","",254,[[["self"],["formatter"]],["result"]]],[11,"eq","","",254,[[["self"],["colon"]],["bool"]]],[11,"hash","","",254,[[["self"],["h"]]]],[11,"to_tokens","","",254,[[["self"],["tokenstream"]]]],[11,"parse","","",254,[[["parsestream"]],["result"]]],[11,"peek","","",254,[[["cursor"]],["bool"]]],[11,"display","","",254,[[],["str"]]],[11,"clone","","",255,[[["self"]],["colon2"]]],[11,"default","","",255,[[],["self"]]],[11,"fmt","","",255,[[["self"],["formatter"]],["result"]]],[11,"eq","","",255,[[["self"],["colon2"]],["bool"]]],[11,"hash","","",255,[[["self"],["h"]]]],[11,"to_tokens","","",255,[[["self"],["tokenstream"]]]],[11,"parse","","",255,[[["parsestream"]],["result"]]],[11,"peek","","",255,[[["cursor"]],["bool"]]],[11,"display","","",255,[[],["str"]]],[11,"clone","","",256,[[["self"]],["comma"]]],[11,"default","","",256,[[],["self"]]],[11,"fmt","","",256,[[["self"],["formatter"]],["result"]]],[11,"eq","","",256,[[["self"],["comma"]],["bool"]]],[11,"hash","","",256,[[["self"],["h"]]]],[11,"to_tokens","","",256,[[["self"],["tokenstream"]]]],[11,"parse","","",256,[[["parsestream"]],["result"]]],[11,"peek","","",256,[[["cursor"]],["bool"]]],[11,"display","","",256,[[],["str"]]],[11,"clone","","",257,[[["self"]],["div"]]],[11,"default","","",257,[[],["self"]]],[11,"fmt","","",257,[[["self"],["formatter"]],["result"]]],[11,"eq","","",257,[[["self"],["div"]],["bool"]]],[11,"hash","","",257,[[["self"],["h"]]]],[11,"to_tokens","","",257,[[["self"],["tokenstream"]]]],[11,"parse","","",257,[[["parsestream"]],["result"]]],[11,"peek","","",257,[[["cursor"]],["bool"]]],[11,"display","","",257,[[],["str"]]],[11,"clone","","",258,[[["self"]],["diveq"]]],[11,"default","","",258,[[],["self"]]],[11,"fmt","","",258,[[["self"],["formatter"]],["result"]]],[11,"eq","","",258,[[["self"],["diveq"]],["bool"]]],[11,"hash","","",258,[[["self"],["h"]]]],[11,"to_tokens","","",258,[[["self"],["tokenstream"]]]],[11,"parse","","",258,[[["parsestream"]],["result"]]],[11,"peek","","",258,[[["cursor"]],["bool"]]],[11,"display","","",258,[[],["str"]]],[11,"clone","","",259,[[["self"]],["dollar"]]],[11,"default","","",259,[[],["self"]]],[11,"fmt","","",259,[[["self"],["formatter"]],["result"]]],[11,"eq","","",259,[[["self"],["dollar"]],["bool"]]],[11,"hash","","",259,[[["self"],["h"]]]],[11,"to_tokens","","",259,[[["self"],["tokenstream"]]]],[11,"parse","","",259,[[["parsestream"]],["result"]]],[11,"peek","","",259,[[["cursor"]],["bool"]]],[11,"display","","",259,[[],["str"]]],[11,"clone","","",260,[[["self"]],["dot"]]],[11,"default","","",260,[[],["self"]]],[11,"fmt","","",260,[[["self"],["formatter"]],["result"]]],[11,"eq","","",260,[[["self"],["dot"]],["bool"]]],[11,"hash","","",260,[[["self"],["h"]]]],[11,"to_tokens","","",260,[[["self"],["tokenstream"]]]],[11,"parse","","",260,[[["parsestream"]],["result"]]],[11,"peek","","",260,[[["cursor"]],["bool"]]],[11,"display","","",260,[[],["str"]]],[11,"clone","","",261,[[["self"]],["dot2"]]],[11,"default","","",261,[[],["self"]]],[11,"fmt","","",261,[[["self"],["formatter"]],["result"]]],[11,"eq","","",261,[[["self"],["dot2"]],["bool"]]],[11,"hash","","",261,[[["self"],["h"]]]],[11,"to_tokens","","",261,[[["self"],["tokenstream"]]]],[11,"parse","","",261,[[["parsestream"]],["result"]]],[11,"peek","","",261,[[["cursor"]],["bool"]]],[11,"display","","",261,[[],["str"]]],[11,"clone","","",262,[[["self"]],["dot3"]]],[11,"default","","",262,[[],["self"]]],[11,"fmt","","",262,[[["self"],["formatter"]],["result"]]],[11,"eq","","",262,[[["self"],["dot3"]],["bool"]]],[11,"hash","","",262,[[["self"],["h"]]]],[11,"to_tokens","","",262,[[["self"],["tokenstream"]]]],[11,"parse","","",262,[[["parsestream"]],["result"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"clone","","",263,[[["self"]],["dotdoteq"]]],[11,"default","","",263,[[],["self"]]],[11,"fmt","","",263,[[["self"],["formatter"]],["result"]]],[11,"eq","","",263,[[["self"],["dotdoteq"]],["bool"]]],[11,"hash","","",263,[[["self"],["h"]]]],[11,"to_tokens","","",263,[[["self"],["tokenstream"]]]],[11,"parse","","",263,[[["parsestream"]],["result"]]],[11,"peek","","",263,[[["cursor"]],["bool"]]],[11,"display","","",263,[[],["str"]]],[11,"clone","","",264,[[["self"]],["eq"]]],[11,"default","","",264,[[],["self"]]],[11,"fmt","","",264,[[["self"],["formatter"]],["result"]]],[11,"eq","","",264,[[["self"],["eq"]],["bool"]]],[11,"hash","","",264,[[["self"],["h"]]]],[11,"to_tokens","","",264,[[["self"],["tokenstream"]]]],[11,"parse","","",264,[[["parsestream"]],["result"]]],[11,"peek","","",264,[[["cursor"]],["bool"]]],[11,"display","","",264,[[],["str"]]],[11,"clone","","",265,[[["self"]],["eqeq"]]],[11,"default","","",265,[[],["self"]]],[11,"fmt","","",265,[[["self"],["formatter"]],["result"]]],[11,"eq","","",265,[[["self"],["eqeq"]],["bool"]]],[11,"hash","","",265,[[["self"],["h"]]]],[11,"to_tokens","","",265,[[["self"],["tokenstream"]]]],[11,"parse","","",265,[[["parsestream"]],["result"]]],[11,"peek","","",265,[[["cursor"]],["bool"]]],[11,"display","","",265,[[],["str"]]],[11,"clone","","",266,[[["self"]],["ge"]]],[11,"default","","",266,[[],["self"]]],[11,"fmt","","",266,[[["self"],["formatter"]],["result"]]],[11,"eq","","",266,[[["self"],["ge"]],["bool"]]],[11,"hash","","",266,[[["self"],["h"]]]],[11,"to_tokens","","",266,[[["self"],["tokenstream"]]]],[11,"parse","","",266,[[["parsestream"]],["result"]]],[11,"peek","","",266,[[["cursor"]],["bool"]]],[11,"display","","",266,[[],["str"]]],[11,"clone","","",267,[[["self"]],["gt"]]],[11,"default","","",267,[[],["self"]]],[11,"fmt","","",267,[[["self"],["formatter"]],["result"]]],[11,"eq","","",267,[[["self"],["gt"]],["bool"]]],[11,"hash","","",267,[[["self"],["h"]]]],[11,"to_tokens","","",267,[[["self"],["tokenstream"]]]],[11,"parse","","",267,[[["parsestream"]],["result"]]],[11,"peek","","",267,[[["cursor"]],["bool"]]],[11,"display","","",267,[[],["str"]]],[11,"clone","","",268,[[["self"]],["le"]]],[11,"default","","",268,[[],["self"]]],[11,"fmt","","",268,[[["self"],["formatter"]],["result"]]],[11,"eq","","",268,[[["self"],["le"]],["bool"]]],[11,"hash","","",268,[[["self"],["h"]]]],[11,"to_tokens","","",268,[[["self"],["tokenstream"]]]],[11,"parse","","",268,[[["parsestream"]],["result"]]],[11,"peek","","",268,[[["cursor"]],["bool"]]],[11,"display","","",268,[[],["str"]]],[11,"clone","","",269,[[["self"]],["lt"]]],[11,"default","","",269,[[],["self"]]],[11,"fmt","","",269,[[["self"],["formatter"]],["result"]]],[11,"eq","","",269,[[["self"],["lt"]],["bool"]]],[11,"hash","","",269,[[["self"],["h"]]]],[11,"to_tokens","","",269,[[["self"],["tokenstream"]]]],[11,"parse","","",269,[[["parsestream"]],["result"]]],[11,"peek","","",269,[[["cursor"]],["bool"]]],[11,"display","","",269,[[],["str"]]],[11,"clone","","",270,[[["self"]],["muleq"]]],[11,"default","","",270,[[],["self"]]],[11,"fmt","","",270,[[["self"],["formatter"]],["result"]]],[11,"eq","","",270,[[["self"],["muleq"]],["bool"]]],[11,"hash","","",270,[[["self"],["h"]]]],[11,"to_tokens","","",270,[[["self"],["tokenstream"]]]],[11,"parse","","",270,[[["parsestream"]],["result"]]],[11,"peek","","",270,[[["cursor"]],["bool"]]],[11,"display","","",270,[[],["str"]]],[11,"clone","","",271,[[["self"]],["ne"]]],[11,"default","","",271,[[],["self"]]],[11,"fmt","","",271,[[["self"],["formatter"]],["result"]]],[11,"eq","","",271,[[["self"],["ne"]],["bool"]]],[11,"hash","","",271,[[["self"],["h"]]]],[11,"to_tokens","","",271,[[["self"],["tokenstream"]]]],[11,"parse","","",271,[[["parsestream"]],["result"]]],[11,"peek","","",271,[[["cursor"]],["bool"]]],[11,"display","","",271,[[],["str"]]],[11,"clone","","",272,[[["self"]],["or"]]],[11,"default","","",272,[[],["self"]]],[11,"fmt","","",272,[[["self"],["formatter"]],["result"]]],[11,"eq","","",272,[[["self"],["or"]],["bool"]]],[11,"hash","","",272,[[["self"],["h"]]]],[11,"to_tokens","","",272,[[["self"],["tokenstream"]]]],[11,"parse","","",272,[[["parsestream"]],["result"]]],[11,"peek","","",272,[[["cursor"]],["bool"]]],[11,"display","","",272,[[],["str"]]],[11,"clone","","",273,[[["self"]],["oreq"]]],[11,"default","","",273,[[],["self"]]],[11,"fmt","","",273,[[["self"],["formatter"]],["result"]]],[11,"eq","","",273,[[["self"],["oreq"]],["bool"]]],[11,"hash","","",273,[[["self"],["h"]]]],[11,"to_tokens","","",273,[[["self"],["tokenstream"]]]],[11,"parse","","",273,[[["parsestream"]],["result"]]],[11,"peek","","",273,[[["cursor"]],["bool"]]],[11,"display","","",273,[[],["str"]]],[11,"clone","","",274,[[["self"]],["oror"]]],[11,"default","","",274,[[],["self"]]],[11,"fmt","","",274,[[["self"],["formatter"]],["result"]]],[11,"eq","","",274,[[["self"],["oror"]],["bool"]]],[11,"hash","","",274,[[["self"],["h"]]]],[11,"to_tokens","","",274,[[["self"],["tokenstream"]]]],[11,"parse","","",274,[[["parsestream"]],["result"]]],[11,"peek","","",274,[[["cursor"]],["bool"]]],[11,"display","","",274,[[],["str"]]],[11,"clone","","",275,[[["self"]],["pound"]]],[11,"default","","",275,[[],["self"]]],[11,"fmt","","",275,[[["self"],["formatter"]],["result"]]],[11,"eq","","",275,[[["self"],["pound"]],["bool"]]],[11,"hash","","",275,[[["self"],["h"]]]],[11,"to_tokens","","",275,[[["self"],["tokenstream"]]]],[11,"parse","","",275,[[["parsestream"]],["result"]]],[11,"peek","","",275,[[["cursor"]],["bool"]]],[11,"display","","",275,[[],["str"]]],[11,"clone","","",276,[[["self"]],["question"]]],[11,"default","","",276,[[],["self"]]],[11,"fmt","","",276,[[["self"],["formatter"]],["result"]]],[11,"eq","","",276,[[["self"],["question"]],["bool"]]],[11,"hash","","",276,[[["self"],["h"]]]],[11,"to_tokens","","",276,[[["self"],["tokenstream"]]]],[11,"parse","","",276,[[["parsestream"]],["result"]]],[11,"peek","","",276,[[["cursor"]],["bool"]]],[11,"display","","",276,[[],["str"]]],[11,"clone","","",277,[[["self"]],["rarrow"]]],[11,"default","","",277,[[],["self"]]],[11,"fmt","","",277,[[["self"],["formatter"]],["result"]]],[11,"eq","","",277,[[["self"],["rarrow"]],["bool"]]],[11,"hash","","",277,[[["self"],["h"]]]],[11,"to_tokens","","",277,[[["self"],["tokenstream"]]]],[11,"parse","","",277,[[["parsestream"]],["result"]]],[11,"peek","","",277,[[["cursor"]],["bool"]]],[11,"display","","",277,[[],["str"]]],[11,"clone","","",278,[[["self"]],["larrow"]]],[11,"default","","",278,[[],["self"]]],[11,"fmt","","",278,[[["self"],["formatter"]],["result"]]],[11,"eq","","",278,[[["self"],["larrow"]],["bool"]]],[11,"hash","","",278,[[["self"],["h"]]]],[11,"to_tokens","","",278,[[["self"],["tokenstream"]]]],[11,"parse","","",278,[[["parsestream"]],["result"]]],[11,"peek","","",278,[[["cursor"]],["bool"]]],[11,"display","","",278,[[],["str"]]],[11,"clone","","",279,[[["self"]],["rem"]]],[11,"default","","",279,[[],["self"]]],[11,"fmt","","",279,[[["self"],["formatter"]],["result"]]],[11,"eq","","",279,[[["self"],["rem"]],["bool"]]],[11,"hash","","",279,[[["self"],["h"]]]],[11,"to_tokens","","",279,[[["self"],["tokenstream"]]]],[11,"parse","","",279,[[["parsestream"]],["result"]]],[11,"peek","","",279,[[["cursor"]],["bool"]]],[11,"display","","",279,[[],["str"]]],[11,"clone","","",280,[[["self"]],["remeq"]]],[11,"default","","",280,[[],["self"]]],[11,"fmt","","",280,[[["self"],["formatter"]],["result"]]],[11,"eq","","",280,[[["self"],["remeq"]],["bool"]]],[11,"hash","","",280,[[["self"],["h"]]]],[11,"to_tokens","","",280,[[["self"],["tokenstream"]]]],[11,"parse","","",280,[[["parsestream"]],["result"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"clone","","",281,[[["self"]],["fatarrow"]]],[11,"default","","",281,[[],["self"]]],[11,"fmt","","",281,[[["self"],["formatter"]],["result"]]],[11,"eq","","",281,[[["self"],["fatarrow"]],["bool"]]],[11,"hash","","",281,[[["self"],["h"]]]],[11,"to_tokens","","",281,[[["self"],["tokenstream"]]]],[11,"parse","","",281,[[["parsestream"]],["result"]]],[11,"peek","","",281,[[["cursor"]],["bool"]]],[11,"display","","",281,[[],["str"]]],[11,"clone","","",282,[[["self"]],["semi"]]],[11,"default","","",282,[[],["self"]]],[11,"fmt","","",282,[[["self"],["formatter"]],["result"]]],[11,"eq","","",282,[[["self"],["semi"]],["bool"]]],[11,"hash","","",282,[[["self"],["h"]]]],[11,"to_tokens","","",282,[[["self"],["tokenstream"]]]],[11,"parse","","",282,[[["parsestream"]],["result"]]],[11,"peek","","",282,[[["cursor"]],["bool"]]],[11,"display","","",282,[[],["str"]]],[11,"clone","","",283,[[["self"]],["shl"]]],[11,"default","","",283,[[],["self"]]],[11,"fmt","","",283,[[["self"],["formatter"]],["result"]]],[11,"eq","","",283,[[["self"],["shl"]],["bool"]]],[11,"hash","","",283,[[["self"],["h"]]]],[11,"to_tokens","","",283,[[["self"],["tokenstream"]]]],[11,"parse","","",283,[[["parsestream"]],["result"]]],[11,"peek","","",283,[[["cursor"]],["bool"]]],[11,"display","","",283,[[],["str"]]],[11,"clone","","",284,[[["self"]],["shleq"]]],[11,"default","","",284,[[],["self"]]],[11,"fmt","","",284,[[["self"],["formatter"]],["result"]]],[11,"eq","","",284,[[["self"],["shleq"]],["bool"]]],[11,"hash","","",284,[[["self"],["h"]]]],[11,"to_tokens","","",284,[[["self"],["tokenstream"]]]],[11,"parse","","",284,[[["parsestream"]],["result"]]],[11,"peek","","",284,[[["cursor"]],["bool"]]],[11,"display","","",284,[[],["str"]]],[11,"clone","","",285,[[["self"]],["shr"]]],[11,"default","","",285,[[],["self"]]],[11,"fmt","","",285,[[["self"],["formatter"]],["result"]]],[11,"eq","","",285,[[["self"],["shr"]],["bool"]]],[11,"hash","","",285,[[["self"],["h"]]]],[11,"to_tokens","","",285,[[["self"],["tokenstream"]]]],[11,"parse","","",285,[[["parsestream"]],["result"]]],[11,"peek","","",285,[[["cursor"]],["bool"]]],[11,"display","","",285,[[],["str"]]],[11,"clone","","",286,[[["self"]],["shreq"]]],[11,"default","","",286,[[],["self"]]],[11,"fmt","","",286,[[["self"],["formatter"]],["result"]]],[11,"eq","","",286,[[["self"],["shreq"]],["bool"]]],[11,"hash","","",286,[[["self"],["h"]]]],[11,"to_tokens","","",286,[[["self"],["tokenstream"]]]],[11,"parse","","",286,[[["parsestream"]],["result"]]],[11,"peek","","",286,[[["cursor"]],["bool"]]],[11,"display","","",286,[[],["str"]]],[11,"clone","","",287,[[["self"]],["star"]]],[11,"default","","",287,[[],["self"]]],[11,"fmt","","",287,[[["self"],["formatter"]],["result"]]],[11,"eq","","",287,[[["self"],["star"]],["bool"]]],[11,"hash","","",287,[[["self"],["h"]]]],[11,"to_tokens","","",287,[[["self"],["tokenstream"]]]],[11,"parse","","",287,[[["parsestream"]],["result"]]],[11,"peek","","",287,[[["cursor"]],["bool"]]],[11,"display","","",287,[[],["str"]]],[11,"clone","","",288,[[["self"]],["sub"]]],[11,"default","","",288,[[],["self"]]],[11,"fmt","","",288,[[["self"],["formatter"]],["result"]]],[11,"eq","","",288,[[["self"],["sub"]],["bool"]]],[11,"hash","","",288,[[["self"],["h"]]]],[11,"to_tokens","","",288,[[["self"],["tokenstream"]]]],[11,"parse","","",288,[[["parsestream"]],["result"]]],[11,"peek","","",288,[[["cursor"]],["bool"]]],[11,"display","","",288,[[],["str"]]],[11,"clone","","",289,[[["self"]],["subeq"]]],[11,"default","","",289,[[],["self"]]],[11,"fmt","","",289,[[["self"],["formatter"]],["result"]]],[11,"eq","","",289,[[["self"],["subeq"]],["bool"]]],[11,"hash","","",289,[[["self"],["h"]]]],[11,"to_tokens","","",289,[[["self"],["tokenstream"]]]],[11,"parse","","",289,[[["parsestream"]],["result"]]],[11,"peek","","",289,[[["cursor"]],["bool"]]],[11,"display","","",289,[[],["str"]]],[11,"clone","","",290,[[["self"]],["tilde"]]],[11,"default","","",290,[[],["self"]]],[11,"fmt","","",290,[[["self"],["formatter"]],["result"]]],[11,"eq","","",290,[[["self"],["tilde"]],["bool"]]],[11,"hash","","",290,[[["self"],["h"]]]],[11,"to_tokens","","",290,[[["self"],["tokenstream"]]]],[11,"parse","","",290,[[["parsestream"]],["result"]]],[11,"peek","","",290,[[["cursor"]],["bool"]]],[11,"display","","",290,[[],["str"]]],[11,"clone","","",291,[[["self"]],["brace"]]],[11,"default","","",291,[[],["self"]]],[11,"fmt","","",291,[[["self"],["formatter"]],["result"]]],[11,"eq","","",291,[[["self"],["brace"]],["bool"]]],[11,"hash","","",291,[[["self"],["h"]]]],[11,"surround","","",291,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",292,[[["self"]],["bracket"]]],[11,"default","","",292,[[],["self"]]],[11,"fmt","","",292,[[["self"],["formatter"]],["result"]]],[11,"eq","","",292,[[["self"],["bracket"]],["bool"]]],[11,"hash","","",292,[[["self"],["h"]]]],[11,"surround","","",292,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",293,[[["self"]],["paren"]]],[11,"default","","",293,[[],["self"]]],[11,"fmt","","",293,[[["self"],["formatter"]],["result"]]],[11,"eq","","",293,[[["self"],["paren"]],["bool"]]],[11,"hash","","",293,[[["self"],["h"]]]],[11,"surround","","",293,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",294,[[["self"]],["group"]]],[11,"default","","",294,[[],["self"]]],[11,"fmt","","",294,[[["self"],["formatter"]],["result"]]],[11,"eq","","",294,[[["self"],["group"]],["bool"]]],[11,"hash","","",294,[[["self"],["h"]]]],[11,"surround","","",294,[[["self"],["tokenstream"],["f"]]]],[11,"parse","syn","",301,[[["parsestream"]],["result"]]],[11,"peek","","",301,[[["cursor"]],["bool"]]],[11,"display","","",301,[[],["str"]]],[11,"from","","",301,[[["self_"]],["ident"]]],[11,"from","","",301,[[["capself"]],["ident"]]],[11,"from","","",301,[[["super"]],["ident"]]],[11,"from","","",301,[[["crate"]],["ident"]]],[11,"from","","",301,[[["extern"]],["ident"]]],[11,"from","","",301,[[["underscore"]],["ident"]]],[11,"parse","","",159,[[["parsestream"]],["result"]]],[11,"parse","","",1,[[["parsestream"]],["result"]]],[11,"parse","","",2,[[["parsestream"]],["result"]]],[11,"parse","","",160,[[["parsestream"]],["result"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"parse_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["result",["meta"]]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"eq","","",158,[[["self"],["attrstyle"]],["bool"]]],[11,"ne","","",158,[[["self"],["attrstyle"]],["bool"]]],[11,"hash","","",158,N],[11,"clone","","",158,[[["self"]],["attrstyle"]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"eq","","",159,[[["self"],["meta"]],["bool"]]],[11,"ne","","",159,[[["self"],["meta"]],["bool"]]],[11,"hash","","",159,N],[11,"clone","","",159,[[["self"]],["meta"]]],[11,"from","","",159,[[["ident"]],["meta"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["metalist"]],["bool"]]],[11,"ne","","",1,[[["self"],["metalist"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",159,[[["metalist"]],["meta"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"ne","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"hash","","",2,N],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",159,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",159,[[["self"]],["ident"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"eq","","",160,[[["self"],["nestedmeta"]],["bool"]]],[11,"ne","","",160,[[["self"],["nestedmeta"]],["bool"]]],[11,"hash","","",160,N],[11,"clone","","",160,[[["self"]],["nestedmeta"]]],[11,"from","","",160,[[["meta"]],["nestedmeta"]]],[11,"from","","",160,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",5,[[["parsestream"]],["result"]]],[11,"parse_named","","Parses a named (braced struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse","","",162,[[["parsestream"]],["result"]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["variant"]],["bool"]]],[11,"ne","","",6,[[["self"],["variant"]],["bool"]]],[11,"hash","","",6,N],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"eq","","",161,[[["self"],["fields"]],["bool"]]],[11,"ne","","",161,[[["self"],["fields"]],["bool"]]],[11,"hash","","",161,N],[11,"clone","","",161,[[["self"]],["fields"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"ne","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",161,[[["fieldsnamed"]],["fields"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"ne","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"hash","","",5,N],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",161,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",161,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",161,[[["self"]],["itermut",["field"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["field"]],["bool"]]],[11,"ne","","",3,[[["self"],["field"]],["bool"]]],[11,"hash","","",3,N],[11,"clone","","",3,[[["self"]],["field"]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result"]]],[11,"eq","","",162,[[["self"],["visibility"]],["bool"]]],[11,"ne","","",162,[[["self"],["visibility"]],["bool"]]],[11,"hash","","",162,N],[11,"clone","","",162,[[["self"]],["visibility"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"ne","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"hash","","",8,N],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",162,[[["vispublic"]],["visibility"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"ne","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",162,[[["viscrate"]],["visibility"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"ne","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"hash","","",9,N],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",162,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"parse","","",163,[[["parsestream"]],["result"]]],[11,"parse","","",55,[[["parsestream"]],["result"]]],[11,"parse","","",54,[[["parsestream"]],["result"]]],[11,"parse","","",167,[[["parsestream"]],["result"]]],[11,"parse","","",35,[[["parsestream"]],["result"]]],[11,"parse","","",52,[[["parsestream"]],["result"]]],[11,"parse_within","","Parse the body of a block as zero or more statements, possibly including one trailing expression.",52,[[["parsestream"]],["result",["vec"]]]],[11,"parse","","",168,[[["parsestream"]],["result"]]],[11,"parse","","",166,[[["parsestream"]],["result"]]],[11,"parse","","",164,[[["parsestream"]],["result"]]],[11,"parse","","",50,[[["parsestream"]],["result"]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",36,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",35,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",37,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",62,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",63,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"eq","","",163,[[["self"],["expr"]],["bool"]]],[11,"ne","","",163,[[["self"],["expr"]],["bool"]]],[11,"hash","","",163,N],[11,"clone","","",163,[[["self"]],["expr"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["exprbox"]],["bool"]]],[11,"ne","","",16,[[["self"],["exprbox"]],["bool"]]],[11,"hash","","",16,N],[11,"clone","","",16,[[["self"]],["exprbox"]]],[11,"from","","",163,[[["exprbox"]],["expr"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["exprinplace"]],["bool"]]],[11,"ne","","",26,[[["self"],["exprinplace"]],["bool"]]],[11,"hash","","",26,N],[11,"clone","","",26,[[["self"]],["exprinplace"]]],[11,"from","","",163,[[["exprinplace"]],["expr"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["exprarray"]],["bool"]]],[11,"ne","","",10,[[["self"],["exprarray"]],["bool"]]],[11,"hash","","",10,N],[11,"clone","","",10,[[["self"]],["exprarray"]]],[11,"from","","",163,[[["exprarray"]],["expr"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["exprcall"]],["bool"]]],[11,"ne","","",18,[[["self"],["exprcall"]],["bool"]]],[11,"hash","","",18,N],[11,"clone","","",18,[[["self"]],["exprcall"]]],[11,"from","","",163,[[["exprcall"]],["expr"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["exprmethodcall"]],["bool"]]],[11,"ne","","",33,[[["self"],["exprmethodcall"]],["bool"]]],[11,"hash","","",33,N],[11,"clone","","",33,[[["self"]],["exprmethodcall"]]],[11,"from","","",163,[[["exprmethodcall"]],["expr"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",43,[[["self"],["exprtuple"]],["bool"]]],[11,"ne","","",43,[[["self"],["exprtuple"]],["bool"]]],[11,"hash","","",43,N],[11,"clone","","",43,[[["self"]],["exprtuple"]]],[11,"from","","",163,[[["exprtuple"]],["expr"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["exprbinary"]],["bool"]]],[11,"ne","","",14,[[["self"],["exprbinary"]],["bool"]]],[11,"hash","","",14,N],[11,"clone","","",14,[[["self"]],["exprbinary"]]],[11,"from","","",163,[[["exprbinary"]],["expr"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["exprunary"]],["bool"]]],[11,"ne","","",45,[[["self"],["exprunary"]],["bool"]]],[11,"hash","","",45,N],[11,"clone","","",45,[[["self"]],["exprunary"]]],[11,"from","","",163,[[["exprunary"]],["expr"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["exprlit"]],["bool"]]],[11,"ne","","",29,[[["self"],["exprlit"]],["bool"]]],[11,"hash","","",29,N],[11,"clone","","",29,[[["self"]],["exprlit"]]],[11,"from","","",163,[[["exprlit"]],["expr"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["exprcast"]],["bool"]]],[11,"ne","","",19,[[["self"],["exprcast"]],["bool"]]],[11,"hash","","",19,N],[11,"clone","","",19,[[["self"]],["exprcast"]]],[11,"from","","",163,[[["exprcast"]],["expr"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["exprtype"]],["bool"]]],[11,"ne","","",44,[[["self"],["exprtype"]],["bool"]]],[11,"hash","","",44,N],[11,"clone","","",44,[[["self"]],["exprtype"]]],[11,"from","","",163,[[["exprtype"]],["expr"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["exprlet"]],["bool"]]],[11,"ne","","",28,[[["self"],["exprlet"]],["bool"]]],[11,"hash","","",28,N],[11,"clone","","",28,[[["self"]],["exprlet"]]],[11,"from","","",163,[[["exprlet"]],["expr"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["exprif"]],["bool"]]],[11,"ne","","",25,[[["self"],["exprif"]],["bool"]]],[11,"hash","","",25,N],[11,"clone","","",25,[[["self"]],["exprif"]]],[11,"from","","",163,[[["exprif"]],["expr"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["exprwhile"]],["bool"]]],[11,"ne","","",48,[[["self"],["exprwhile"]],["bool"]]],[11,"hash","","",48,N],[11,"clone","","",48,[[["self"]],["exprwhile"]]],[11,"from","","",163,[[["exprwhile"]],["expr"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["exprforloop"]],["bool"]]],[11,"ne","","",23,[[["self"],["exprforloop"]],["bool"]]],[11,"hash","","",23,N],[11,"clone","","",23,[[["self"]],["exprforloop"]]],[11,"from","","",163,[[["exprforloop"]],["expr"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["exprloop"]],["bool"]]],[11,"ne","","",30,[[["self"],["exprloop"]],["bool"]]],[11,"hash","","",30,N],[11,"clone","","",30,[[["self"]],["exprloop"]]],[11,"from","","",163,[[["exprloop"]],["expr"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["exprmatch"]],["bool"]]],[11,"ne","","",32,[[["self"],["exprmatch"]],["bool"]]],[11,"hash","","",32,N],[11,"clone","","",32,[[["self"]],["exprmatch"]]],[11,"from","","",163,[[["exprmatch"]],["expr"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["exprclosure"]],["bool"]]],[11,"ne","","",20,[[["self"],["exprclosure"]],["bool"]]],[11,"hash","","",20,N],[11,"clone","","",20,[[["self"]],["exprclosure"]]],[11,"from","","",163,[[["exprclosure"]],["expr"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["exprunsafe"]],["bool"]]],[11,"ne","","",46,[[["self"],["exprunsafe"]],["bool"]]],[11,"hash","","",46,N],[11,"clone","","",46,[[["self"]],["exprunsafe"]]],[11,"from","","",163,[[["exprunsafe"]],["expr"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["exprblock"]],["bool"]]],[11,"ne","","",15,[[["self"],["exprblock"]],["bool"]]],[11,"hash","","",15,N],[11,"clone","","",15,[[["self"]],["exprblock"]]],[11,"from","","",163,[[["exprblock"]],["expr"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["exprassign"]],["bool"]]],[11,"ne","","",11,[[["self"],["exprassign"]],["bool"]]],[11,"hash","","",11,N],[11,"clone","","",11,[[["self"]],["exprassign"]]],[11,"from","","",163,[[["exprassign"]],["expr"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["exprassignop"]],["bool"]]],[11,"ne","","",12,[[["self"],["exprassignop"]],["bool"]]],[11,"hash","","",12,N],[11,"clone","","",12,[[["self"]],["exprassignop"]]],[11,"from","","",163,[[["exprassignop"]],["expr"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["exprfield"]],["bool"]]],[11,"ne","","",22,[[["self"],["exprfield"]],["bool"]]],[11,"hash","","",22,N],[11,"clone","","",22,[[["self"]],["exprfield"]]],[11,"from","","",163,[[["exprfield"]],["expr"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["exprindex"]],["bool"]]],[11,"ne","","",27,[[["self"],["exprindex"]],["bool"]]],[11,"hash","","",27,N],[11,"clone","","",27,[[["self"]],["exprindex"]]],[11,"from","","",163,[[["exprindex"]],["expr"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["exprrange"]],["bool"]]],[11,"ne","","",36,[[["self"],["exprrange"]],["bool"]]],[11,"hash","","",36,N],[11,"clone","","",36,[[["self"]],["exprrange"]]],[11,"from","","",163,[[["exprrange"]],["expr"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["exprpath"]],["bool"]]],[11,"ne","","",35,[[["self"],["exprpath"]],["bool"]]],[11,"hash","","",35,N],[11,"clone","","",35,[[["self"]],["exprpath"]]],[11,"from","","",163,[[["exprpath"]],["expr"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["exprreference"]],["bool"]]],[11,"ne","","",37,[[["self"],["exprreference"]],["bool"]]],[11,"hash","","",37,N],[11,"clone","","",37,[[["self"]],["exprreference"]]],[11,"from","","",163,[[["exprreference"]],["expr"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["exprbreak"]],["bool"]]],[11,"ne","","",17,[[["self"],["exprbreak"]],["bool"]]],[11,"hash","","",17,N],[11,"clone","","",17,[[["self"]],["exprbreak"]]],[11,"from","","",163,[[["exprbreak"]],["expr"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["exprcontinue"]],["bool"]]],[11,"ne","","",21,[[["self"],["exprcontinue"]],["bool"]]],[11,"hash","","",21,N],[11,"clone","","",21,[[["self"]],["exprcontinue"]]],[11,"from","","",163,[[["exprcontinue"]],["expr"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["exprreturn"]],["bool"]]],[11,"ne","","",39,[[["self"],["exprreturn"]],["bool"]]],[11,"hash","","",39,N],[11,"clone","","",39,[[["self"]],["exprreturn"]]],[11,"from","","",163,[[["exprreturn"]],["expr"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["exprmacro"]],["bool"]]],[11,"ne","","",31,[[["self"],["exprmacro"]],["bool"]]],[11,"hash","","",31,N],[11,"clone","","",31,[[["self"]],["exprmacro"]]],[11,"from","","",163,[[["exprmacro"]],["expr"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["exprstruct"]],["bool"]]],[11,"ne","","",40,[[["self"],["exprstruct"]],["bool"]]],[11,"hash","","",40,N],[11,"clone","","",40,[[["self"]],["exprstruct"]]],[11,"from","","",163,[[["exprstruct"]],["expr"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["exprrepeat"]],["bool"]]],[11,"ne","","",38,[[["self"],["exprrepeat"]],["bool"]]],[11,"hash","","",38,N],[11,"clone","","",38,[[["self"]],["exprrepeat"]]],[11,"from","","",163,[[["exprrepeat"]],["expr"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["exprparen"]],["bool"]]],[11,"ne","","",34,[[["self"],["exprparen"]],["bool"]]],[11,"hash","","",34,N],[11,"clone","","",34,[[["self"]],["exprparen"]]],[11,"from","","",163,[[["exprparen"]],["expr"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["exprgroup"]],["bool"]]],[11,"ne","","",24,[[["self"],["exprgroup"]],["bool"]]],[11,"hash","","",24,N],[11,"clone","","",24,[[["self"]],["exprgroup"]]],[11,"from","","",163,[[["exprgroup"]],["expr"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["exprtry"]],["bool"]]],[11,"ne","","",41,[[["self"],["exprtry"]],["bool"]]],[11,"hash","","",41,N],[11,"clone","","",41,[[["self"]],["exprtry"]]],[11,"from","","",163,[[["exprtry"]],["expr"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["exprasync"]],["bool"]]],[11,"ne","","",13,[[["self"],["exprasync"]],["bool"]]],[11,"hash","","",13,N],[11,"clone","","",13,[[["self"]],["exprasync"]]],[11,"from","","",163,[[["exprasync"]],["expr"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["exprtryblock"]],["bool"]]],[11,"ne","","",42,[[["self"],["exprtryblock"]],["bool"]]],[11,"hash","","",42,N],[11,"clone","","",42,[[["self"]],["exprtryblock"]]],[11,"from","","",163,[[["exprtryblock"]],["expr"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["expryield"]],["bool"]]],[11,"ne","","",49,[[["self"],["expryield"]],["bool"]]],[11,"hash","","",49,N],[11,"clone","","",49,[[["self"]],["expryield"]]],[11,"from","","",163,[[["expryield"]],["expr"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["exprverbatim"]]],[11,"from","","",163,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"eq","","",47,[[["self"],["self"]],["bool"]]],[11,"hash","","",47,[[["self"],["h"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"eq","","",164,[[["self"],["member"]],["bool"]]],[11,"ne","","",164,[[["self"],["member"]],["bool"]]],[11,"hash","","",164,N],[11,"clone","","",164,[[["self"]],["member"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["index"]]],[11,"from","","",50,[[["usize"]],["index"]]],[11,"eq","","",50,[[["self"],["self"]],["bool"]]],[11,"hash","","",50,[[["self"],["h"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["methodturbofish"]],["bool"]]],[11,"ne","","",57,[[["self"],["methodturbofish"]],["bool"]]],[11,"hash","","",57,N],[11,"clone","","",57,[[["self"]],["methodturbofish"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"eq","","",165,[[["self"],["genericmethodargument"]],["bool"]]],[11,"ne","","",165,[[["self"],["genericmethodargument"]],["bool"]]],[11,"hash","","",165,N],[11,"clone","","",165,[[["self"]],["genericmethodargument"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["fieldvalue"]],["bool"]]],[11,"ne","","",54,[[["self"],["fieldvalue"]],["bool"]]],[11,"hash","","",54,N],[11,"clone","","",54,[[["self"]],["fieldvalue"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["label"]],["bool"]]],[11,"ne","","",55,[[["self"],["label"]],["bool"]]],[11,"hash","","",55,N],[11,"clone","","",55,[[["self"]],["label"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["block"]],["bool"]]],[11,"ne","","",52,[[["self"],["block"]],["bool"]]],[11,"hash","","",52,N],[11,"clone","","",52,[[["self"]],["block"]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result"]]],[11,"eq","","",168,[[["self"],["stmt"]],["bool"]]],[11,"ne","","",168,[[["self"],["stmt"]],["bool"]]],[11,"hash","","",168,N],[11,"clone","","",168,[[["self"]],["stmt"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["local"]],["bool"]]],[11,"ne","","",56,[[["self"],["local"]],["bool"]]],[11,"hash","","",56,N],[11,"clone","","",56,[[["self"]],["local"]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result"]]],[11,"eq","","",166,[[["self"],["pat"]],["bool"]]],[11,"ne","","",166,[[["self"],["pat"]],["bool"]]],[11,"hash","","",166,N],[11,"clone","","",166,[[["self"]],["pat"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"eq","","",70,[[["self"],["patwild"]],["bool"]]],[11,"ne","","",70,[[["self"],["patwild"]],["bool"]]],[11,"hash","","",70,N],[11,"clone","","",70,[[["self"]],["patwild"]]],[11,"from","","",166,[[["patwild"]],["pat"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"eq","","",59,[[["self"],["patident"]],["bool"]]],[11,"ne","","",59,[[["self"],["patident"]],["bool"]]],[11,"hash","","",59,N],[11,"clone","","",59,[[["self"]],["patident"]]],[11,"from","","",166,[[["patident"]],["pat"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["patstruct"]],["bool"]]],[11,"ne","","",66,[[["self"],["patstruct"]],["bool"]]],[11,"hash","","",66,N],[11,"clone","","",66,[[["self"]],["patstruct"]]],[11,"from","","",166,[[["patstruct"]],["pat"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"eq","","",68,[[["self"],["pattuplestruct"]],["bool"]]],[11,"ne","","",68,[[["self"],["pattuplestruct"]],["bool"]]],[11,"hash","","",68,N],[11,"clone","","",68,[[["self"]],["pattuplestruct"]]],[11,"from","","",166,[[["pattuplestruct"]],["pat"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"eq","","",62,[[["self"],["patpath"]],["bool"]]],[11,"ne","","",62,[[["self"],["patpath"]],["bool"]]],[11,"hash","","",62,N],[11,"clone","","",62,[[["self"]],["patpath"]]],[11,"from","","",166,[[["patpath"]],["pat"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"eq","","",67,[[["self"],["pattuple"]],["bool"]]],[11,"ne","","",67,[[["self"],["pattuple"]],["bool"]]],[11,"hash","","",67,N],[11,"clone","","",67,[[["self"]],["pattuple"]]],[11,"from","","",166,[[["pattuple"]],["pat"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"eq","","",58,[[["self"],["patbox"]],["bool"]]],[11,"ne","","",58,[[["self"],["patbox"]],["bool"]]],[11,"hash","","",58,N],[11,"clone","","",58,[[["self"]],["patbox"]]],[11,"from","","",166,[[["patbox"]],["pat"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["patref"]],["bool"]]],[11,"ne","","",64,[[["self"],["patref"]],["bool"]]],[11,"hash","","",64,N],[11,"clone","","",64,[[["self"]],["patref"]]],[11,"from","","",166,[[["patref"]],["pat"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"eq","","",60,[[["self"],["patlit"]],["bool"]]],[11,"ne","","",60,[[["self"],["patlit"]],["bool"]]],[11,"hash","","",60,N],[11,"clone","","",60,[[["self"]],["patlit"]]],[11,"from","","",166,[[["patlit"]],["pat"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"eq","","",63,[[["self"],["patrange"]],["bool"]]],[11,"ne","","",63,[[["self"],["patrange"]],["bool"]]],[11,"hash","","",63,N],[11,"clone","","",63,[[["self"]],["patrange"]]],[11,"from","","",166,[[["patrange"]],["pat"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["patslice"]],["bool"]]],[11,"ne","","",65,[[["self"],["patslice"]],["bool"]]],[11,"hash","","",65,N],[11,"clone","","",65,[[["self"]],["patslice"]]],[11,"from","","",166,[[["patslice"]],["pat"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"eq","","",61,[[["self"],["patmacro"]],["bool"]]],[11,"ne","","",61,[[["self"],["patmacro"]],["bool"]]],[11,"hash","","",61,N],[11,"clone","","",61,[[["self"]],["patmacro"]]],[11,"from","","",166,[[["patmacro"]],["pat"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"clone","","",69,[[["self"]],["patverbatim"]]],[11,"from","","",166,[[["patverbatim"]],["pat"]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"eq","","",69,[[["self"],["self"]],["bool"]]],[11,"hash","","",69,[[["self"],["h"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["arm"]],["bool"]]],[11,"ne","","",51,[[["self"],["arm"]],["bool"]]],[11,"hash","","",51,N],[11,"clone","","",51,[[["self"]],["arm"]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result"]]],[11,"eq","","",167,[[["self"],["rangelimits"]],["bool"]]],[11,"ne","","",167,[[["self"],["rangelimits"]],["bool"]]],[11,"hash","","",167,N],[11,"clone","","",167,[[["self"]],["rangelimits"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["fieldpat"]],["bool"]]],[11,"ne","","",53,[[["self"],["fieldpat"]],["bool"]]],[11,"hash","","",53,N],[11,"clone","","",53,[[["self"]],["fieldpat"]]],[11,"parse","","",73,[[["parsestream"]],["result"]]],[11,"parse","","",169,[[["parsestream"]],["result"]]],[11,"parse","","",74,[[["parsestream"]],["result"]]],[11,"parse","","",71,[[["parsestream"]],["result"]]],[11,"parse","","",79,[[["parsestream"]],["result"]]],[11,"parse","","",171,[[["parsestream"]],["result"]]],[11,"parse","","",78,[[["parsestream"]],["result"]]],[11,"parse","","",170,[[["parsestream"]],["result"]]],[11,"parse","","",72,[[["parsestream"]],["result"]]],[11,"parse","","",80,[[["parsestream"]],["result"]]],[11,"parse","","",172,[[["parsestream"]],["result"]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",302,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",303,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",304,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",74,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",79,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",78,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",77,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",75,[[["self"],["tokenstream"]]]],[11,"default","","",73,[[],["generics"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"eq","","",73,[[["self"],["generics"]],["bool"]]],[11,"ne","","",73,[[["self"],["generics"]],["bool"]]],[11,"hash","","",73,N],[11,"clone","","",73,[[["self"]],["generics"]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result"]]],[11,"eq","","",169,[[["self"],["genericparam"]],["bool"]]],[11,"ne","","",169,[[["self"],["genericparam"]],["bool"]]],[11,"hash","","",169,N],[11,"clone","","",169,[[["self"]],["genericparam"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"eq","","",79,[[["self"],["typeparam"]],["bool"]]],[11,"ne","","",79,[[["self"],["typeparam"]],["bool"]]],[11,"hash","","",79,N],[11,"clone","","",79,[[["self"]],["typeparam"]]],[11,"from","","",169,[[["typeparam"]],["genericparam"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"eq","","",74,[[["self"],["lifetimedef"]],["bool"]]],[11,"ne","","",74,[[["self"],["lifetimedef"]],["bool"]]],[11,"hash","","",74,N],[11,"clone","","",74,[[["self"]],["lifetimedef"]]],[11,"from","","",169,[[["lifetimedef"]],["genericparam"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"eq","","",72,[[["self"],["constparam"]],["bool"]]],[11,"ne","","",72,[[["self"],["constparam"]],["bool"]]],[11,"hash","","",72,N],[11,"clone","","",72,[[["self"]],["constparam"]]],[11,"from","","",169,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",73,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",73,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",73,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",73,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",73,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",73,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",73,[[["self"]],["whereclause"]]],[11,"fmt","","",302,[[["self"],["formatter"]],["result"]]],[11,"eq","","",302,[[["self"],["implgenerics"]],["bool"]]],[11,"ne","","",302,[[["self"],["implgenerics"]],["bool"]]],[11,"hash","","",302,N],[11,"clone","","",302,[[["self"]],["implgenerics"]]],[11,"fmt","","",303,[[["self"],["formatter"]],["result"]]],[11,"eq","","",303,[[["self"],["typegenerics"]],["bool"]]],[11,"ne","","",303,[[["self"],["typegenerics"]],["bool"]]],[11,"hash","","",303,N],[11,"clone","","",303,[[["self"]],["typegenerics"]]],[11,"fmt","","",304,[[["self"],["formatter"]],["result"]]],[11,"eq","","",304,[[["self"],["turbofish"]],["bool"]]],[11,"ne","","",304,[[["self"],["turbofish"]],["bool"]]],[11,"hash","","",304,N],[11,"clone","","",304,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",73,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",303,[[["self"]],["turbofish"]]],[11,"default","","",71,[[],["boundlifetimes"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"eq","","",71,[[["self"],["boundlifetimes"]],["bool"]]],[11,"ne","","",71,[[["self"],["boundlifetimes"]],["bool"]]],[11,"hash","","",71,N],[11,"clone","","",71,[[["self"]],["boundlifetimes"]]],[11,"new","","",74,[[["lifetime"]],["self"]]],[11,"from","","",79,[[["ident"]],["self"]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result"]]],[11,"eq","","",171,[[["self"],["typeparambound"]],["bool"]]],[11,"ne","","",171,[[["self"],["typeparambound"]],["bool"]]],[11,"hash","","",171,N],[11,"clone","","",171,[[["self"]],["typeparambound"]]],[11,"from","","",171,[[["traitbound"]],["typeparambound"]]],[11,"from","","",171,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"eq","","",78,[[["self"],["traitbound"]],["bool"]]],[11,"ne","","",78,[[["self"],["traitbound"]],["bool"]]],[11,"hash","","",78,N],[11,"clone","","",78,[[["self"]],["traitbound"]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"eq","","",170,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"ne","","",170,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"hash","","",170,N],[11,"clone","","",170,[[["self"]],["traitboundmodifier"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"eq","","",80,[[["self"],["whereclause"]],["bool"]]],[11,"ne","","",80,[[["self"],["whereclause"]],["bool"]]],[11,"hash","","",80,N],[11,"clone","","",80,[[["self"]],["whereclause"]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result"]]],[11,"eq","","",172,[[["self"],["wherepredicate"]],["bool"]]],[11,"ne","","",172,[[["self"],["wherepredicate"]],["bool"]]],[11,"hash","","",172,N],[11,"clone","","",172,[[["self"]],["wherepredicate"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"eq","","",77,[[["self"],["predicatetype"]],["bool"]]],[11,"ne","","",77,[[["self"],["predicatetype"]],["bool"]]],[11,"hash","","",77,N],[11,"clone","","",77,[[["self"]],["predicatetype"]]],[11,"from","","",172,[[["predicatetype"]],["wherepredicate"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"eq","","",76,[[["self"],["predicatelifetime"]],["bool"]]],[11,"ne","","",76,[[["self"],["predicatelifetime"]],["bool"]]],[11,"hash","","",76,N],[11,"clone","","",76,[[["self"]],["predicatelifetime"]]],[11,"from","","",172,[[["predicatelifetime"]],["wherepredicate"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"eq","","",75,[[["self"],["predicateeq"]],["bool"]]],[11,"ne","","",75,[[["self"],["predicateeq"]],["bool"]]],[11,"hash","","",75,N],[11,"clone","","",75,[[["self"]],["predicateeq"]]],[11,"from","","",172,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"parse","","",176,[[["parsestream"]],["result"]]],[11,"parse","","",103,[[["parsestream"]],["result"]]],[11,"parse","","",104,[[["parsestream"]],["result"]]],[11,"parse","","",99,[[["parsestream"]],["result"]]],[11,"parse","","",112,[[["parsestream"]],["result"]]],[11,"parse","","",106,[[["parsestream"]],["result"]]],[11,"parse","","",96,[[["parsestream"]],["result"]]],[11,"parse","","",100,[[["parsestream"]],["result"]]],[11,"parse","","",173,[[["parsestream"]],["result"]]],[11,"parse","","",105,[[["parsestream"]],["result"]]],[11,"parse","","",101,[[["parsestream"]],["result"]]],[11,"parse","","",174,[[["parsestream"]],["result"]]],[11,"parse","","",85,[[["parsestream"]],["result"]]],[11,"parse","","",87,[[["parsestream"]],["result"]]],[11,"parse","","",88,[[["parsestream"]],["result"]]],[11,"parse","","",86,[[["parsestream"]],["result"]]],[11,"parse","","",110,[[["parsestream"]],["result"]]],[11,"parse","","",98,[[["parsestream"]],["result"]]],[11,"parse","","",107,[[["parsestream"]],["result"]]],[11,"parse","","",97,[[["parsestream"]],["result"]]],[11,"parse","","",111,[[["parsestream"]],["result"]]],[11,"parse","","",108,[[["parsestream"]],["result"]]],[11,"parse","","",109,[[["parsestream"]],["result"]]],[11,"parse","","",177,[[["parsestream"]],["result"]]],[11,"parse","","",115,[[["parsestream"]],["result"]]],[11,"parse","","",117,[[["parsestream"]],["result"]]],[11,"parse","","",118,[[["parsestream"]],["result"]]],[11,"parse","","",116,[[["parsestream"]],["result"]]],[11,"parse","","",102,[[["parsestream"]],["result"]]],[11,"parse","","",175,[[["parsestream"]],["result"]]],[11,"parse","","",90,[[["parsestream"]],["result"]]],[11,"parse","","",93,[[["parsestream"]],["result"]]],[11,"parse","","",94,[[["parsestream"]],["result"]]],[11,"parse","","",91,[[["parsestream"]],["result"]]],[11,"parse","","",92,[[["parsestream"]],["result"]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result"]]],[11,"eq","","",176,[[["self"],["item"]],["bool"]]],[11,"ne","","",176,[[["self"],["item"]],["bool"]]],[11,"hash","","",176,N],[11,"clone","","",176,[[["self"]],["item"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"eq","","",99,[[["self"],["itemexterncrate"]],["bool"]]],[11,"ne","","",99,[[["self"],["itemexterncrate"]],["bool"]]],[11,"hash","","",99,N],[11,"clone","","",99,[[["self"]],["itemexterncrate"]]],[11,"from","","",176,[[["itemexterncrate"]],["item"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"eq","","",112,[[["self"],["itemuse"]],["bool"]]],[11,"ne","","",112,[[["self"],["itemuse"]],["bool"]]],[11,"hash","","",112,N],[11,"clone","","",112,[[["self"]],["itemuse"]]],[11,"from","","",176,[[["itemuse"]],["item"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"eq","","",106,[[["self"],["itemstatic"]],["bool"]]],[11,"ne","","",106,[[["self"],["itemstatic"]],["bool"]]],[11,"hash","","",106,N],[11,"clone","","",106,[[["self"]],["itemstatic"]]],[11,"from","","",176,[[["itemstatic"]],["item"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"eq","","",96,[[["self"],["itemconst"]],["bool"]]],[11,"ne","","",96,[[["self"],["itemconst"]],["bool"]]],[11,"hash","","",96,N],[11,"clone","","",96,[[["self"]],["itemconst"]]],[11,"from","","",176,[[["itemconst"]],["item"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"eq","","",100,[[["self"],["itemfn"]],["bool"]]],[11,"ne","","",100,[[["self"],["itemfn"]],["bool"]]],[11,"hash","","",100,N],[11,"clone","","",100,[[["self"]],["itemfn"]]],[11,"from","","",176,[[["itemfn"]],["item"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"eq","","",105,[[["self"],["itemmod"]],["bool"]]],[11,"ne","","",105,[[["self"],["itemmod"]],["bool"]]],[11,"hash","","",105,N],[11,"clone","","",105,[[["self"]],["itemmod"]]],[11,"from","","",176,[[["itemmod"]],["item"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"eq","","",101,[[["self"],["itemforeignmod"]],["bool"]]],[11,"ne","","",101,[[["self"],["itemforeignmod"]],["bool"]]],[11,"hash","","",101,N],[11,"clone","","",101,[[["self"]],["itemforeignmod"]]],[11,"from","","",176,[[["itemforeignmod"]],["item"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"eq","","",110,[[["self"],["itemtype"]],["bool"]]],[11,"ne","","",110,[[["self"],["itemtype"]],["bool"]]],[11,"hash","","",110,N],[11,"clone","","",110,[[["self"]],["itemtype"]]],[11,"from","","",176,[[["itemtype"]],["item"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"eq","","",98,[[["self"],["itemexistential"]],["bool"]]],[11,"ne","","",98,[[["self"],["itemexistential"]],["bool"]]],[11,"hash","","",98,N],[11,"clone","","",98,[[["self"]],["itemexistential"]]],[11,"from","","",176,[[["itemexistential"]],["item"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"eq","","",107,[[["self"],["itemstruct"]],["bool"]]],[11,"ne","","",107,[[["self"],["itemstruct"]],["bool"]]],[11,"hash","","",107,N],[11,"clone","","",107,[[["self"]],["itemstruct"]]],[11,"from","","",176,[[["itemstruct"]],["item"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"eq","","",97,[[["self"],["itemenum"]],["bool"]]],[11,"ne","","",97,[[["self"],["itemenum"]],["bool"]]],[11,"hash","","",97,N],[11,"clone","","",97,[[["self"]],["itemenum"]]],[11,"from","","",176,[[["itemenum"]],["item"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"eq","","",111,[[["self"],["itemunion"]],["bool"]]],[11,"ne","","",111,[[["self"],["itemunion"]],["bool"]]],[11,"hash","","",111,N],[11,"clone","","",111,[[["self"]],["itemunion"]]],[11,"from","","",176,[[["itemunion"]],["item"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"eq","","",108,[[["self"],["itemtrait"]],["bool"]]],[11,"ne","","",108,[[["self"],["itemtrait"]],["bool"]]],[11,"hash","","",108,N],[11,"clone","","",108,[[["self"]],["itemtrait"]]],[11,"from","","",176,[[["itemtrait"]],["item"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"eq","","",109,[[["self"],["itemtraitalias"]],["bool"]]],[11,"ne","","",109,[[["self"],["itemtraitalias"]],["bool"]]],[11,"hash","","",109,N],[11,"clone","","",109,[[["self"]],["itemtraitalias"]]],[11,"from","","",176,[[["itemtraitalias"]],["item"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"eq","","",102,[[["self"],["itemimpl"]],["bool"]]],[11,"ne","","",102,[[["self"],["itemimpl"]],["bool"]]],[11,"hash","","",102,N],[11,"clone","","",102,[[["self"]],["itemimpl"]]],[11,"from","","",176,[[["itemimpl"]],["item"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"eq","","",103,[[["self"],["itemmacro"]],["bool"]]],[11,"ne","","",103,[[["self"],["itemmacro"]],["bool"]]],[11,"hash","","",103,N],[11,"clone","","",103,[[["self"]],["itemmacro"]]],[11,"from","","",176,[[["itemmacro"]],["item"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"clone","","",104,[[["self"]],["itemmacro2"]]],[11,"from","","",176,[[["itemmacro2"]],["item"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"clone","","",113,[[["self"]],["itemverbatim"]]],[11,"from","","",176,[[["itemverbatim"]],["item"]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"eq","","",104,[[["self"],["self"]],["bool"]]],[11,"hash","","",104,[[["self"],["h"]]]],[11,"eq","","",113,[[["self"],["self"]],["bool"]]],[11,"hash","","",113,[[["self"],["h"]]]],[11,"from","","",176,[[["deriveinput"]],["item"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result"]]],[11,"eq","","",178,[[["self"],["usetree"]],["bool"]]],[11,"ne","","",178,[[["self"],["usetree"]],["bool"]]],[11,"hash","","",178,N],[11,"clone","","",178,[[["self"]],["usetree"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"eq","","",123,[[["self"],["usepath"]],["bool"]]],[11,"ne","","",123,[[["self"],["usepath"]],["bool"]]],[11,"hash","","",123,N],[11,"clone","","",123,[[["self"]],["usepath"]]],[11,"from","","",178,[[["usepath"]],["usetree"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"eq","","",122,[[["self"],["usename"]],["bool"]]],[11,"ne","","",122,[[["self"],["usename"]],["bool"]]],[11,"hash","","",122,N],[11,"clone","","",122,[[["self"]],["usename"]]],[11,"from","","",178,[[["usename"]],["usetree"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"eq","","",124,[[["self"],["userename"]],["bool"]]],[11,"ne","","",124,[[["self"],["userename"]],["bool"]]],[11,"hash","","",124,N],[11,"clone","","",124,[[["self"]],["userename"]]],[11,"from","","",178,[[["userename"]],["usetree"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"eq","","",120,[[["self"],["useglob"]],["bool"]]],[11,"ne","","",120,[[["self"],["useglob"]],["bool"]]],[11,"hash","","",120,N],[11,"clone","","",120,[[["self"]],["useglob"]]],[11,"from","","",178,[[["useglob"]],["usetree"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"eq","","",121,[[["self"],["usegroup"]],["bool"]]],[11,"ne","","",121,[[["self"],["usegroup"]],["bool"]]],[11,"hash","","",121,N],[11,"clone","","",121,[[["self"]],["usegroup"]]],[11,"from","","",178,[[["usegroup"]],["usetree"]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result"]]],[11,"eq","","",174,[[["self"],["foreignitem"]],["bool"]]],[11,"ne","","",174,[[["self"],["foreignitem"]],["bool"]]],[11,"hash","","",174,N],[11,"clone","","",174,[[["self"]],["foreignitem"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"eq","","",85,[[["self"],["foreignitemfn"]],["bool"]]],[11,"ne","","",85,[[["self"],["foreignitemfn"]],["bool"]]],[11,"hash","","",85,N],[11,"clone","","",85,[[["self"]],["foreignitemfn"]]],[11,"from","","",174,[[["foreignitemfn"]],["foreignitem"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"eq","","",87,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"ne","","",87,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"hash","","",87,N],[11,"clone","","",87,[[["self"]],["foreignitemstatic"]]],[11,"from","","",174,[[["foreignitemstatic"]],["foreignitem"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"eq","","",88,[[["self"],["foreignitemtype"]],["bool"]]],[11,"ne","","",88,[[["self"],["foreignitemtype"]],["bool"]]],[11,"hash","","",88,N],[11,"clone","","",88,[[["self"]],["foreignitemtype"]]],[11,"from","","",174,[[["foreignitemtype"]],["foreignitem"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"eq","","",86,[[["self"],["foreignitemmacro"]],["bool"]]],[11,"ne","","",86,[[["self"],["foreignitemmacro"]],["bool"]]],[11,"hash","","",86,N],[11,"clone","","",86,[[["self"]],["foreignitemmacro"]]],[11,"from","","",174,[[["foreignitemmacro"]],["foreignitem"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["foreignitemverbatim"]]],[11,"from","","",174,[[["foreignitemverbatim"]],["foreignitem"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"eq","","",89,[[["self"],["self"]],["bool"]]],[11,"hash","","",89,[[["self"],["h"]]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"eq","","",177,[[["self"],["traititem"]],["bool"]]],[11,"ne","","",177,[[["self"],["traititem"]],["bool"]]],[11,"hash","","",177,N],[11,"clone","","",177,[[["self"]],["traititem"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"eq","","",115,[[["self"],["traititemconst"]],["bool"]]],[11,"ne","","",115,[[["self"],["traititemconst"]],["bool"]]],[11,"hash","","",115,N],[11,"clone","","",115,[[["self"]],["traititemconst"]]],[11,"from","","",177,[[["traititemconst"]],["traititem"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"eq","","",117,[[["self"],["traititemmethod"]],["bool"]]],[11,"ne","","",117,[[["self"],["traititemmethod"]],["bool"]]],[11,"hash","","",117,N],[11,"clone","","",117,[[["self"]],["traititemmethod"]]],[11,"from","","",177,[[["traititemmethod"]],["traititem"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"eq","","",118,[[["self"],["traititemtype"]],["bool"]]],[11,"ne","","",118,[[["self"],["traititemtype"]],["bool"]]],[11,"hash","","",118,N],[11,"clone","","",118,[[["self"]],["traititemtype"]]],[11,"from","","",177,[[["traititemtype"]],["traititem"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"eq","","",116,[[["self"],["traititemmacro"]],["bool"]]],[11,"ne","","",116,[[["self"],["traititemmacro"]],["bool"]]],[11,"hash","","",116,N],[11,"clone","","",116,[[["self"]],["traititemmacro"]]],[11,"from","","",177,[[["traititemmacro"]],["traititem"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"clone","","",119,[[["self"]],["traititemverbatim"]]],[11,"from","","",177,[[["traititemverbatim"]],["traititem"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"eq","","",119,[[["self"],["self"]],["bool"]]],[11,"hash","","",119,[[["self"],["h"]]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result"]]],[11,"eq","","",175,[[["self"],["implitem"]],["bool"]]],[11,"ne","","",175,[[["self"],["implitem"]],["bool"]]],[11,"hash","","",175,N],[11,"clone","","",175,[[["self"]],["implitem"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"eq","","",90,[[["self"],["implitemconst"]],["bool"]]],[11,"ne","","",90,[[["self"],["implitemconst"]],["bool"]]],[11,"hash","","",90,N],[11,"clone","","",90,[[["self"]],["implitemconst"]]],[11,"from","","",175,[[["implitemconst"]],["implitem"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"eq","","",93,[[["self"],["implitemmethod"]],["bool"]]],[11,"ne","","",93,[[["self"],["implitemmethod"]],["bool"]]],[11,"hash","","",93,N],[11,"clone","","",93,[[["self"]],["implitemmethod"]]],[11,"from","","",175,[[["implitemmethod"]],["implitem"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"eq","","",94,[[["self"],["implitemtype"]],["bool"]]],[11,"ne","","",94,[[["self"],["implitemtype"]],["bool"]]],[11,"hash","","",94,N],[11,"clone","","",94,[[["self"]],["implitemtype"]]],[11,"from","","",175,[[["implitemtype"]],["implitem"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"eq","","",91,[[["self"],["implitemexistential"]],["bool"]]],[11,"ne","","",91,[[["self"],["implitemexistential"]],["bool"]]],[11,"hash","","",91,N],[11,"clone","","",91,[[["self"]],["implitemexistential"]]],[11,"from","","",175,[[["implitemexistential"]],["implitem"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"eq","","",92,[[["self"],["implitemmacro"]],["bool"]]],[11,"ne","","",92,[[["self"],["implitemmacro"]],["bool"]]],[11,"hash","","",92,N],[11,"clone","","",92,[[["self"]],["implitemmacro"]]],[11,"from","","",175,[[["implitemmacro"]],["implitem"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"clone","","",95,[[["self"]],["implitemverbatim"]]],[11,"from","","",175,[[["implitemverbatim"]],["implitem"]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"eq","","",95,[[["self"],["self"]],["bool"]]],[11,"hash","","",95,[[["self"],["h"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"eq","","",114,[[["self"],["methodsig"]],["bool"]]],[11,"ne","","",114,[[["self"],["methodsig"]],["bool"]]],[11,"hash","","",114,N],[11,"clone","","",114,[[["self"]],["methodsig"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"eq","","",84,[[["self"],["fndecl"]],["bool"]]],[11,"ne","","",84,[[["self"],["fndecl"]],["bool"]]],[11,"hash","","",84,N],[11,"clone","","",84,[[["self"]],["fndecl"]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result"]]],[11,"eq","","",173,[[["self"],["fnarg"]],["bool"]]],[11,"ne","","",173,[[["self"],["fnarg"]],["bool"]]],[11,"hash","","",173,N],[11,"clone","","",173,[[["self"]],["fnarg"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"eq","","",83,[[["self"],["argselfref"]],["bool"]]],[11,"ne","","",83,[[["self"],["argselfref"]],["bool"]]],[11,"hash","","",83,N],[11,"clone","","",83,[[["self"]],["argselfref"]]],[11,"from","","",173,[[["argselfref"]],["fnarg"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"eq","","",82,[[["self"],["argself"]],["bool"]]],[11,"ne","","",82,[[["self"],["argself"]],["bool"]]],[11,"hash","","",82,N],[11,"clone","","",82,[[["self"]],["argself"]]],[11,"from","","",173,[[["argself"]],["fnarg"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"eq","","",81,[[["self"],["argcaptured"]],["bool"]]],[11,"ne","","",81,[[["self"],["argcaptured"]],["bool"]]],[11,"hash","","",81,N],[11,"clone","","",81,[[["self"]],["argcaptured"]]],[11,"from","","",173,[[["argcaptured"]],["fnarg"]]],[11,"from","","",173,[[["pat"]],["fnarg"]]],[11,"from","","",173,[[["type"]],["fnarg"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"parse","","",125,[[["parsestream"]],["result"]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"eq","","",125,[[["self"],["file"]],["bool"]]],[11,"ne","","",125,[[["self"],["file"]],["bool"]]],[11,"hash","","",125,N],[11,"clone","","",125,[[["self"]],["file"]]],[11,"parse","","",126,[[["parsestream"]],["result"]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"clone","","",126,[[["self"]],["lifetime"]]],[11,"new","","Panics",126,[[["str"],["span"]],["self"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"eq","","",126,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",126,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",126,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",126,[[["self"],["h"]]]],[11,"parse","","",181,[[["parsestream"]],["result"]]],[11,"parse","","",295,[[["parsestream"]],["result"]]],[11,"parse","","",296,[[["parsestream"]],["result"]]],[11,"parse","","",297,[[["parsestream"]],["result"]]],[11,"parse","","",298,[[["parsestream"]],["result"]]],[11,"parse","","",299,[[["parsestream"]],["result"]]],[11,"parse","","",300,[[["parsestream"]],["result"]]],[11,"parse","","",127,[[["parsestream"]],["result"]]],[11,"to_tokens","","",295,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",296,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",297,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",298,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",299,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",300,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",181,[[["literal"]],["self"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"eq","","",181,[[["self"],["lit"]],["bool"]]],[11,"ne","","",181,[[["self"],["lit"]],["bool"]]],[11,"hash","","",181,N],[11,"clone","","",181,[[["self"]],["lit"]]],[11,"fmt","","",295,[[["self"],["formatter"]],["result"]]],[11,"clone","","",295,[[["self"]],["litstr"]]],[11,"from","","",181,[[["litstr"]],["lit"]]],[11,"fmt","","",296,[[["self"],["formatter"]],["result"]]],[11,"clone","","",296,[[["self"]],["litbytestr"]]],[11,"from","","",181,[[["litbytestr"]],["lit"]]],[11,"fmt","","",297,[[["self"],["formatter"]],["result"]]],[11,"clone","","",297,[[["self"]],["litbyte"]]],[11,"from","","",181,[[["litbyte"]],["lit"]]],[11,"fmt","","",298,[[["self"],["formatter"]],["result"]]],[11,"clone","","",298,[[["self"]],["litchar"]]],[11,"from","","",181,[[["litchar"]],["lit"]]],[11,"fmt","","",299,[[["self"],["formatter"]],["result"]]],[11,"clone","","",299,[[["self"]],["litint"]]],[11,"from","","",181,[[["litint"]],["lit"]]],[11,"fmt","","",300,[[["self"],["formatter"]],["result"]]],[11,"clone","","",300,[[["self"]],["litfloat"]]],[11,"from","","",181,[[["litfloat"]],["lit"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"clone","","",127,[[["self"]],["litbool"]]],[11,"from","","",181,[[["litbool"]],["lit"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"clone","","",128,[[["self"]],["litverbatim"]]],[11,"from","","",181,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",181,[[["self"],["tokenstream"]]]],[11,"new","","",295,[[["str"],["span"]],["self"]]],[11,"value","","",295,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",295,[[["self"]],["result",["error"]]]],[11,"span","","",295,[[["self"]],["span"]]],[11,"set_span","","",295,[[["self"],["span"]]]],[11,"new","","",296,N],[11,"value","","",296,[[["self"]],["vec",["u8"]]]],[11,"span","","",296,[[["self"]],["span"]]],[11,"set_span","","",296,[[["self"],["span"]]]],[11,"new","","",297,[[["u8"],["span"]],["self"]]],[11,"value","","",297,[[["self"]],["u8"]]],[11,"span","","",297,[[["self"]],["span"]]],[11,"set_span","","",297,[[["self"],["span"]]]],[11,"new","","",298,[[["char"],["span"]],["self"]]],[11,"value","","",298,[[["self"]],["char"]]],[11,"span","","",298,[[["self"]],["span"]]],[11,"set_span","","",298,[[["self"],["span"]]]],[11,"new","","",299,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",299,[[["self"]],["u64"]]],[11,"suffix","","",299,[[["self"]],["intsuffix"]]],[11,"span","","",299,[[["self"]],["span"]]],[11,"set_span","","",299,[[["self"],["span"]]]],[11,"new","","",300,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",300,[[["self"]],["f64"]]],[11,"suffix","","",300,[[["self"]],["floatsuffix"]]],[11,"span","","",300,[[["self"]],["span"]]],[11,"set_span","","",300,[[["self"],["span"]]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"set_span","","",128,[[["self"],["span"]]]],[11,"eq","","",295,[[["self"],["self"]],["bool"]]],[11,"hash","","",295,[[["self"],["h"]]]],[11,"eq","","",296,[[["self"],["self"]],["bool"]]],[11,"hash","","",296,[[["self"],["h"]]]],[11,"eq","","",297,[[["self"],["self"]],["bool"]]],[11,"hash","","",297,[[["self"],["h"]]]],[11,"eq","","",298,[[["self"],["self"]],["bool"]]],[11,"hash","","",298,[[["self"],["h"]]]],[11,"eq","","",299,[[["self"],["self"]],["bool"]]],[11,"hash","","",299,[[["self"],["h"]]]],[11,"eq","","",300,[[["self"],["self"]],["bool"]]],[11,"hash","","",300,[[["self"],["h"]]]],[11,"eq","","",127,[[["self"],["self"]],["bool"]]],[11,"hash","","",127,[[["self"],["h"]]]],[11,"eq","","",128,[[["self"],["self"]],["bool"]]],[11,"hash","","",128,[[["self"],["h"]]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"eq","","",182,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",182,[[["self"],["strstyle"]],["bool"]]],[11,"hash","","",182,N],[11,"clone","","",182,[[["self"]],["strstyle"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"eq","","",180,[[["self"],["intsuffix"]],["bool"]]],[11,"hash","","",180,N],[11,"clone","","",180,[[["self"]],["intsuffix"]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result"]]],[11,"eq","","",179,[[["self"],["floatsuffix"]],["bool"]]],[11,"hash","","",179,N],[11,"clone","","",179,[[["self"]],["floatsuffix"]]],[11,"parse","","",129,[[["parsestream"]],["result"]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"clone","","",129,[[["self"]],["macro"]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"eq","","",183,[[["self"],["macrodelimiter"]],["bool"]]],[11,"ne","","",183,[[["self"],["macrodelimiter"]],["bool"]]],[11,"hash","","",183,N],[11,"clone","","",183,[[["self"]],["macrodelimiter"]]],[11,"eq","","",129,[[["self"],["self"]],["bool"]]],[11,"hash","","",129,[[["self"],["h"]]]],[11,"parse","","",133,[[["parsestream"]],["result"]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"eq","","",133,[[["self"],["deriveinput"]],["bool"]]],[11,"ne","","",133,[[["self"],["deriveinput"]],["bool"]]],[11,"hash","","",133,N],[11,"clone","","",133,[[["self"]],["deriveinput"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"eq","","",184,[[["self"],["data"]],["bool"]]],[11,"ne","","",184,[[["self"],["data"]],["bool"]]],[11,"hash","","",184,N],[11,"clone","","",184,[[["self"]],["data"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"eq","","",131,[[["self"],["datastruct"]],["bool"]]],[11,"ne","","",131,[[["self"],["datastruct"]],["bool"]]],[11,"hash","","",131,N],[11,"clone","","",131,[[["self"]],["datastruct"]]],[11,"from","","",184,[[["datastruct"]],["data"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"eq","","",130,[[["self"],["dataenum"]],["bool"]]],[11,"ne","","",130,[[["self"],["dataenum"]],["bool"]]],[11,"hash","","",130,N],[11,"clone","","",130,[[["self"]],["dataenum"]]],[11,"from","","",184,[[["dataenum"]],["data"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"eq","","",132,[[["self"],["dataunion"]],["bool"]]],[11,"ne","","",132,[[["self"],["dataunion"]],["bool"]]],[11,"hash","","",132,N],[11,"clone","","",132,[[["self"]],["dataunion"]]],[11,"from","","",184,[[["dataunion"]],["data"]]],[11,"parse","","",185,[[["parsestream"]],["result"]]],[11,"parse","","",186,[[["parsestream"]],["result"]]],[11,"to_tokens","","",185,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",186,[[["self"],["tokenstream"]]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result"]]],[11,"eq","","",185,[[["self"],["binop"]],["bool"]]],[11,"ne","","",185,[[["self"],["binop"]],["bool"]]],[11,"hash","","",185,N],[11,"clone","","",185,[[["self"]],["binop"]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result"]]],[11,"eq","","",186,[[["self"],["unop"]],["bool"]]],[11,"ne","","",186,[[["self"],["unop"]],["bool"]]],[11,"hash","","",186,N],[11,"clone","","",186,[[["self"]],["unop"]]],[11,"parse","","",189,[[["parsestream"]],["result"]]],[11,"without_plus","","In some positions, types may not contain the `+` character, to disambiguate them. For example in the expression `1 as T`, T may not contain a `+` character.",189,[[["parsestream"]],["result"]]],[11,"parse","","",147,[[["parsestream"]],["result"]]],[11,"parse","","",136,[[["parsestream"]],["result"]]],[11,"parse","","",145,[[["parsestream"]],["result"]]],[11,"parse","","",146,[[["parsestream"]],["result"]]],[11,"parse","","",137,[[["parsestream"]],["result"]]],[11,"parse","","",142,[[["parsestream"]],["result"]]],[11,"parse","","",140,[[["parsestream"]],["result"]]],[11,"parse","","",149,[[["parsestream"]],["result"]]],[11,"parse","","",141,[[["parsestream"]],["result"]]],[11,"parse","","",144,[[["parsestream"]],["result"]]],[11,"without_plus","","",188,[[["parsestream"]],["result"]]],[11,"parse","","",188,[[["parsestream"],["bool"]],["result"]]],[11,"parse","","",188,[[["parsestream"]],["result"]]],[11,"parse","","",148,[[["parsestream"]],["result"]]],[11,"without_plus","","",148,[[["parsestream"]],["result"]]],[11,"parse","","",148,[[["parsestream"],["bool"]],["result"]]],[11,"parse","","",139,[[["parsestream"]],["result"]]],[11,"parse","","",138,[[["parsestream"]],["result"]]],[11,"parse","","",143,[[["parsestream"]],["result"]]],[11,"parse","","",135,[[["parsestream"]],["result"]]],[11,"parse","","",187,[[["parsestream"]],["result"]]],[11,"parse","","",134,[[["parsestream"]],["result"]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",136,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",137,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",188,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",135,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",187,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",134,[[["self"],["tokenstream"]]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result"]]],[11,"eq","","",189,[[["self"],["type"]],["bool"]]],[11,"ne","","",189,[[["self"],["type"]],["bool"]]],[11,"hash","","",189,N],[11,"clone","","",189,[[["self"]],["type"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"eq","","",147,[[["self"],["typeslice"]],["bool"]]],[11,"ne","","",147,[[["self"],["typeslice"]],["bool"]]],[11,"hash","","",147,N],[11,"clone","","",147,[[["self"]],["typeslice"]]],[11,"from","","",189,[[["typeslice"]],["type"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"eq","","",136,[[["self"],["typearray"]],["bool"]]],[11,"ne","","",136,[[["self"],["typearray"]],["bool"]]],[11,"hash","","",136,N],[11,"clone","","",136,[[["self"]],["typearray"]]],[11,"from","","",189,[[["typearray"]],["type"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"eq","","",145,[[["self"],["typeptr"]],["bool"]]],[11,"ne","","",145,[[["self"],["typeptr"]],["bool"]]],[11,"hash","","",145,N],[11,"clone","","",145,[[["self"]],["typeptr"]]],[11,"from","","",189,[[["typeptr"]],["type"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"eq","","",146,[[["self"],["typereference"]],["bool"]]],[11,"ne","","",146,[[["self"],["typereference"]],["bool"]]],[11,"hash","","",146,N],[11,"clone","","",146,[[["self"]],["typereference"]]],[11,"from","","",189,[[["typereference"]],["type"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"eq","","",137,[[["self"],["typebarefn"]],["bool"]]],[11,"ne","","",137,[[["self"],["typebarefn"]],["bool"]]],[11,"hash","","",137,N],[11,"clone","","",137,[[["self"]],["typebarefn"]]],[11,"from","","",189,[[["typebarefn"]],["type"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"eq","","",142,[[["self"],["typenever"]],["bool"]]],[11,"ne","","",142,[[["self"],["typenever"]],["bool"]]],[11,"hash","","",142,N],[11,"clone","","",142,[[["self"]],["typenever"]]],[11,"from","","",189,[[["typenever"]],["type"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"eq","","",149,[[["self"],["typetuple"]],["bool"]]],[11,"ne","","",149,[[["self"],["typetuple"]],["bool"]]],[11,"hash","","",149,N],[11,"clone","","",149,[[["self"]],["typetuple"]]],[11,"from","","",189,[[["typetuple"]],["type"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"eq","","",144,[[["self"],["typepath"]],["bool"]]],[11,"ne","","",144,[[["self"],["typepath"]],["bool"]]],[11,"hash","","",144,N],[11,"clone","","",144,[[["self"]],["typepath"]]],[11,"from","","",189,[[["typepath"]],["type"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"eq","","",148,[[["self"],["typetraitobject"]],["bool"]]],[11,"ne","","",148,[[["self"],["typetraitobject"]],["bool"]]],[11,"hash","","",148,N],[11,"clone","","",148,[[["self"]],["typetraitobject"]]],[11,"from","","",189,[[["typetraitobject"]],["type"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"eq","","",139,[[["self"],["typeimpltrait"]],["bool"]]],[11,"ne","","",139,[[["self"],["typeimpltrait"]],["bool"]]],[11,"hash","","",139,N],[11,"clone","","",139,[[["self"]],["typeimpltrait"]]],[11,"from","","",189,[[["typeimpltrait"]],["type"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"eq","","",143,[[["self"],["typeparen"]],["bool"]]],[11,"ne","","",143,[[["self"],["typeparen"]],["bool"]]],[11,"hash","","",143,N],[11,"clone","","",143,[[["self"]],["typeparen"]]],[11,"from","","",189,[[["typeparen"]],["type"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"eq","","",138,[[["self"],["typegroup"]],["bool"]]],[11,"ne","","",138,[[["self"],["typegroup"]],["bool"]]],[11,"hash","","",138,N],[11,"clone","","",138,[[["self"]],["typegroup"]]],[11,"from","","",189,[[["typegroup"]],["type"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"eq","","",140,[[["self"],["typeinfer"]],["bool"]]],[11,"ne","","",140,[[["self"],["typeinfer"]],["bool"]]],[11,"hash","","",140,N],[11,"clone","","",140,[[["self"]],["typeinfer"]]],[11,"from","","",189,[[["typeinfer"]],["type"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"eq","","",141,[[["self"],["typemacro"]],["bool"]]],[11,"ne","","",141,[[["self"],["typemacro"]],["bool"]]],[11,"hash","","",141,N],[11,"clone","","",141,[[["self"]],["typemacro"]]],[11,"from","","",189,[[["typemacro"]],["type"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"clone","","",150,[[["self"]],["typeverbatim"]]],[11,"from","","",189,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",189,[[["self"],["tokenstream"]]]],[11,"eq","","",150,[[["self"],["self"]],["bool"]]],[11,"hash","","",150,[[["self"],["h"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"eq","","",134,[[["self"],["abi"]],["bool"]]],[11,"ne","","",134,[[["self"],["abi"]],["bool"]]],[11,"hash","","",134,N],[11,"clone","","",134,[[["self"]],["abi"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"eq","","",135,[[["self"],["barefnarg"]],["bool"]]],[11,"ne","","",135,[[["self"],["barefnarg"]],["bool"]]],[11,"hash","","",135,N],[11,"clone","","",135,[[["self"]],["barefnarg"]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result"]]],[11,"eq","","",187,[[["self"],["barefnargname"]],["bool"]]],[11,"ne","","",187,[[["self"],["barefnargname"]],["bool"]]],[11,"hash","","",187,N],[11,"clone","","",187,[[["self"]],["barefnargname"]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result"]]],[11,"eq","","",188,[[["self"],["returntype"]],["bool"]]],[11,"ne","","",188,[[["self"],["returntype"]],["bool"]]],[11,"hash","","",188,N],[11,"clone","","",188,[[["self"]],["returntype"]]],[11,"parse","","",155,[[["parsestream"]],["result"]]],[11,"parse","","",190,[[["parsestream"]],["result"]]],[11,"parse","","",151,[[["parsestream"]],["result"]]],[11,"parse","","",154,[[["parsestream"]],["result"]]],[11,"parse","","",156,[[["parsestream"]],["result"]]],[11,"parse","","",152,[[["parsestream"]],["result"]]],[11,"parse","","",153,[[["parsestream"]],["result"]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its segments.",155,[[["parsestream"]],["result"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",191,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",190,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"eq","","",155,[[["self"],["path"]],["bool"]]],[11,"ne","","",155,[[["self"],["path"]],["bool"]]],[11,"hash","","",155,N],[11,"clone","","",155,[[["self"]],["path"]]],[11,"from","","",155,[[["t"]],["self"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"eq","","",156,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",156,[[["self"],["pathsegment"]],["bool"]]],[11,"hash","","",156,N],[11,"clone","","",156,[[["self"]],["pathsegment"]]],[11,"from","","",156,[[["t"]],["self"]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"eq","","",191,[[["self"],["patharguments"]],["bool"]]],[11,"ne","","",191,[[["self"],["patharguments"]],["bool"]]],[11,"hash","","",191,N],[11,"clone","","",191,[[["self"]],["patharguments"]]],[11,"default","","",191,[[],["self"]]],[11,"is_empty","","",191,[[["self"]],["bool"]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result"]]],[11,"eq","","",190,[[["self"],["genericargument"]],["bool"]]],[11,"ne","","",190,[[["self"],["genericargument"]],["bool"]]],[11,"hash","","",190,N],[11,"clone","","",190,[[["self"]],["genericargument"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"eq","","",151,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"ne","","",151,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"hash","","",151,N],[11,"clone","","",151,[[["self"]],["anglebracketedgenericarguments"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"eq","","",152,[[["self"],["binding"]],["bool"]]],[11,"ne","","",152,[[["self"],["binding"]],["bool"]]],[11,"hash","","",152,N],[11,"clone","","",152,[[["self"]],["binding"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"eq","","",153,[[["self"],["constraint"]],["bool"]]],[11,"ne","","",153,[[["self"],["constraint"]],["bool"]]],[11,"hash","","",153,N],[11,"clone","","",153,[[["self"]],["constraint"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"eq","","",154,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"ne","","",154,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"hash","","",154,N],[11,"clone","","",154,[[["self"]],["parenthesizedgenericarguments"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"eq","","",157,[[["self"],["qself"]],["bool"]]],[11,"ne","","",157,[[["self"],["qself"]],["bool"]]],[11,"hash","","",157,N],[11,"clone","","",157,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",305,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",305,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",305,[[["self"]],["cursor"]]],[11,"clone","","",306,[[["self"]],["cursor"]]],[11,"eq","","",306,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",306,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",306,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",306,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",306,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",306,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",306,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",306,[[["self"]],["option"]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it along with a cursor pointing at the next `TokenTree`.",306,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",306,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",306,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",306,[[["self"]],["span"]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign types.",N,N],[8,"IdentExt","syn::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",307,[[["parsestream"]],["result"]]],[11,"parse_any","syn","",301,[[["parsestream"]],["result"]]],[0,"punctuated","","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",308,N],[13,"End","","",308,N],[11,"to_tokens","","",309,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",308,[[["self"],["tokenstream"]]]],[11,"eq","","",309,[[["self"],["punctuated"]],["bool"]]],[11,"ne","","",309,[[["self"],["punctuated"]],["bool"]]],[11,"hash","","",309,N],[11,"clone","","",309,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",309,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",309,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",309,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",309,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",309,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",309,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",309,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",309,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",309,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",309,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",309,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",309,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",309,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",309,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",309,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",309,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",309,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",309,[[["self"],["usize"],["t"]]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",309,[[["parsestream"]],["result"]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, with optional trailing punctuation.",309,N],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by punctuation of type `P`, not accepting trailing punctuation.",309,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, not accepting trailing punctuation.",309,N],[11,"fmt","","",309,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",309,[[["i"]],["self"]]],[11,"extend","","",309,[[["self"],["i"]]]],[11,"from_iter","","",309,[[["i"]],["self"]]],[11,"extend","","",309,[[["self"],["i"]]]],[11,"into_iter","","",309,N],[11,"default","","",309,[[],["self"]]],[11,"next","","",310,[[["self"]],["option"]]],[11,"len","","",310,[[["self"]],["usize"]]],[11,"next","","",311,[[["self"]],["option"]]],[11,"len","","",311,[[["self"]],["usize"]]],[11,"next","","",312,[[["self"]],["option"]]],[11,"len","","",312,[[["self"]],["usize"]]],[11,"next","","",313,[[["self"]],["option"]]],[11,"len","","",313,[[["self"]],["usize"]]],[11,"next","","",314,[[["self"]],["option"]]],[11,"len","","",314,[[["self"]],["usize"]]],[11,"next","","",315,[[["self"]],["option"]]],[11,"len","","",315,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",308,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",308,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",308,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",308,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",308,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",308,N],[11,"index","","",309,N],[11,"index_mut","","",309,N],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",316,[[["self"]],["span"]]],[0,"parse","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input tokens.",N,N],[3,"Lookahead1","","Support for checking the next token in a stream to decide how to parse.",N,N],[3,"ParseBuffer","","Cursor position within a buffered token stream.",N,N],[3,"StepCursor","","Cursor state associated with speculative parsing.",N,N],[6,"Result","","The result of a Syn parser.",N,N],[6,"ParseStream","","Input to a Syn parser function.",N,N],[8,"Peek","","Types that can be parsed by looking at just one token.",N,N],[8,"Parse","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",317,[[["parsestream"]],["result"]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",318,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",318,[[["self"],["tokenstream"]],["result"]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",318,[[["self"],["tokenstream"]],["result"]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",318,[[["self"],["str"]],["result"]]],[11,"drop","","",319,[[["self"]]]],[11,"clone","","",320,[[["self"]],["stepcursor"]]],[11,"deref","","",320,N],[11,"error","","Triggers an error at the current position of the parse stream.",320,[[["self"],["t"]],["error"]]],[11,"parse","","Parses a syntax tree node of type `T`, advancing the position of our parse stream past it.",319,[[["self"]],["result"]]],[11,"call","","Calls the given parser function to parse a syntax tree node of type `T` from this stream.",319,N],[11,"peek","","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",319,[[["self"],["t"]],["bool"]]],[11,"peek2","","Looks at the second-next token in the parse stream.",319,[[["self"],["t"]],["bool"]]],[11,"peek3","","Looks at the third-next token in the parse stream.",319,[[["self"],["t"]],["bool"]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",319,N],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",319,[[["self"]],["bool"]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this stream and building an error message if it is not one of a set of expected tokens.",319,[[["self"]],["lookahead1"]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either the original or the fork does not advance the position of the other.",319,[[["self"]],["self"]]],[11,"error","","Triggers an error at the current position of the parse stream.",319,[[["self"],["t"]],["error"]]],[11,"step","","Speculatively parses tokens from this parse stream, advancing the position of this stream only if parsing succeeds.",319,[[["self"],["f"]],["result"]]],[11,"cursor","","Provides low-level access to the token representation underlying this parse stream.",319,[[["self"]],["cursor"]]],[11,"fmt","","",321,[[["self"],["formatter"]],["result"]]],[11,"clone","","",321,[[["self"]],["error"]]],[11,"new","","Usually the [`ParseStream::error`] method will be used instead, which automatically uses the correct span from the current position of the parse stream.",321,[[["span"],["t"]],["self"]]],[11,"span","","",321,[[["self"]],["span"]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",321,[[["self"]],["tokenstream"]]],[11,"fmt","","",321,[[["self"],["formatter"]],["result"]]],[11,"description","","",321,[[["self"]],["str"]]],[11,"from","","",321,[[["lexerror"]],["self"]]],[6,"AttributeArgs","syn","Conventional argument type associated with an invocation of an attribute macro.",N,N],[14,"parenthesized","","Parse a set of parentheses and expose their content to subsequent parsers.",N,N],[14,"braced","","Parse a set of curly braces and expose their content to subsequent parsers.",N,N],[14,"bracketed","","Parse a set of square brackets and expose their content to subsequent parsers.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a compile error if the tokens fail to parse.",N,N],[14,"custom_keyword","","Define a type that supports parsing and printing a given identifier as if it were a keyword.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",301,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",301,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",301,N],[11,"clone","","",301,[[["self"]],["ident"]]],[11,"fmt","","",301,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",301,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",301,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",301,N],[11,"fmt","","",301,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",301,[[["self"],["t"]],["bool"]]],[11,"eq","","",301,[[["self"],["ident"]],["bool"]]],[11,"to_tokens","","",301,N],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",322,[[["self"],["t"]],["bool"]]],[11,"error","","Triggers an error at the current position of the parse stream.",322,[[["self"]],["error"]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprInPlace"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprVerbatim"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[3,"Arm"],[3,"Block"],[3,"FieldPat"],[3,"FieldValue"],[3,"Label"],[3,"Local"],[3,"MethodTurbofish"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatPath"],[3,"PatRange"],[3,"PatRef"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatVerbatim"],[3,"PatWild"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ArgCaptured"],[3,"ArgSelf"],[3,"ArgSelfRef"],[3,"FnDecl"],[3,"ForeignItemFn"],[3,"ForeignItemMacro"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemVerbatim"],[3,"ImplItemConst"],[3,"ImplItemExistential"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemVerbatim"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExistential"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ItemVerbatim"],[3,"MethodSig"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemVerbatim"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericMethodArgument"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Existential"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"Ident"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[8,"Parse"],[8,"Parser"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Lookahead1"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
