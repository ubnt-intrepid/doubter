//! A helper crate for testing Rust code blocks in Markdown.

#![doc(html_root_url = "https://docs.rs/doubter/0.0.6")]

#[macro_use]
extern crate proc_macro_hack;

extern crate doubter_impl as imp;

#[allow(unused_imports)]
#[macro_use]
extern crate doubter_macros;
#[doc(hidden)]
pub use doubter_macros::*;

proc_macro_item_decl! {
    /// Generating code for testing Rust codeblocks in the external Markdown files.
    doubter! => doubter_impl
}

pub use imp::config::{Config, Mode};

// ====

use std::env;
use std::io;
use std::path::PathBuf;

// not a public API.
#[doc(hidden)]
#[macro_export]
macro_rules! __doubter_builtin {
    (include!($($t:tt)*)) => { include!{ $($t)* } };
    (concat!($($t:tt)*)) => { concat!{ $($t)* } };
    (env!($($t:tt)*)) => { env!{ $($t)* } };
}

// not a public API.
#[doc(hidden)]
#[macro_export]
macro_rules! __doubter_test_rs {
    () => {
        "doubter-tests.rs"
    };
}

/// Generates a code calling a `doubter!()` from a list of glob patterns.
///
/// This function is typically used from the inside of `build.rs`,
/// in order to avoid constraints on macro calls.
pub fn generate_doc_tests(config: Config) -> io::Result<()> {
    let out_dir = env::var_os("OUT_DIR").map(PathBuf::from).ok_or_else(|| {
        io::Error::new(
            io::ErrorKind::Other,
            "unknown environment variable: `OUT_DIR`",
        )
    })?;
    let out_path = out_dir.join(__doubter_test_rs!());

    imp::generate_doc_tests(config, out_path)
}

/// Reads the content generated by `generate_doc_tests()` in place.
#[macro_export(local_inner_macros)]
macro_rules! include_doctests {
    () => {
        __doubter_builtin!{include!(
            __doubter_builtin!(concat!(
                __doubter_builtin!(env!("OUT_DIR")),
                "/",
                __doubter_test_rs!()
            ))
        )}
    };
}
