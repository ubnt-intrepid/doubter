//! A helper crate for testing Rust code blocks in Markdown.

#![doc(html_root_url = "https://docs.rs/doubter/0.0.6")]

#[macro_use]
extern crate proc_macro_hack;

#[allow(unused_imports)]
#[macro_use]
extern crate doubter_impl;
#[doc(hidden)]
pub use doubter_impl::*;

proc_macro_item_decl! {
    /// Generating code for testing Rust codeblocks in the external Markdown files.
    doubter! => doubter_impl
}

// ====

use std::env;
use std::fs;
use std::io;
use std::io::{BufWriter, Write};
use std::path::PathBuf;

// not a public API.
#[doc(hidden)]
#[macro_export]
macro_rules! __doubter_builtin {
    (include!($($t:tt)*)) => { include!{ $($t)* } };
    (concat!($($t:tt)*)) => { concat!{ $($t)* } };
    (env!($($t:tt)*)) => { env!{ $($t)* } };
}

// not a public API.
#[doc(hidden)]
#[macro_export]
macro_rules! __doubter_test_rs {
    () => {
        "doubter-tests.rs"
    };
}

/// Generates a code calling a `doubter!()` from a list of glob patterns.
///
/// This function is typically used from the inside of `build.rs`,
/// in order to avoid constraints on macro calls.
pub fn generate_doc_tests<I, S>(patterns: I) -> io::Result<()>
where
    I: IntoIterator<Item = S>,
    S: AsRef<str>,
{
    let out_dir = env::var_os("OUT_DIR").map(PathBuf::from).ok_or_else(|| {
        io::Error::new(
            io::ErrorKind::Other,
            "unknown environment variable: `OUT_DIR`",
        )
    })?;
    let out_path = out_dir.join(__doubter_test_rs!());

    let file = fs::OpenOptions::new()
        .write(true)
        .create(true)
        .truncate(true)
        .open(out_path)?;

    let mut w = BufWriter::new(file);
    writeln!(&mut w, "doubter! {{")?;
    for pattern in patterns {
        writeln!(&mut w, "include = {:?},", pattern.as_ref())?;
    }
    writeln!(&mut w, "}}")?;

    Ok(())
}

/// Reads the content generated by `generate_doc_tests()` in place.
#[macro_export(local_inner_macros)]
macro_rules! include_doctests {
    () => {
        __doubter_builtin!{include!(
            __doubter_builtin!(concat!(
                __doubter_builtin!(env!("OUT_DIR")),
                "/",
                __doubter_test_rs!()
            ))
        )}
    };
}
